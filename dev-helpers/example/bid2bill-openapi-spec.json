{
  "openapi": "3.1.0",
  "info": {
    "title": "Bid2Bill API Doc",
    "version": "8.0.0",
    "contact": {
      "name": "API Support",
      "url": "https://www.example.com/support",
      "email": "henryobiaraije@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://grocery.bid2bill.com",
      "description": "Bid2Bill API - Grocery"
    },
    {
      "url": "https://demo.bid2bill.com",
      "description": "Bid2Bill API - For Demo Site"
    },
    {
      "url": "https://bid2bill.transcpginc.com",
      "description": "Bid2Bill API - For Demo Site"
    },
    {
      "url": "https://test2.test",
      "description": "Bid2Bill API - For Local Test Site"
    },
    {
      "url": "https://f076-38-146-55-45.ngrok-free.app",
      "description": "Test2 Tunnel"
    }
  ],
  "paths": {
    "/wp-json/bid-2-bill/v1/auth/password-recovery/send-otp": {
      "post": {
        "summary": "Send OTP to the user email for password recovery.",
        "operationId": "sendPasswordRecoveryOtp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username_or_email": {
                    "type": "string",
                    "description": "The email or username of the user as provided during signup",
                    "example": "user@example.com"
                  }
                },
                "required": [
                  "username_or_email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/auth/password-recovery/verify-otp": {
      "post": {
        "summary": "Verify OTP sent to the user email for password recovery.",
        "operationId": "verifyPasswordRecoveryOtp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username_or_email": {
                    "type": "string",
                    "description": "The email or username of the user as provided during signup",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "description": "The OTP sent to the user email",
                    "example": "1234"
                  }
                },
                "required": [
                  "username_or_email",
                  "otp"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/auth/password-recovery/reset-password": {
      "put": {
        "summary": "Reset password for the user after verifying OTP.",
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username_or_email": {
                    "type": "string",
                    "description": "The email or username of the user as provided during signup",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "description": "The OTP sent to the user email",
                    "example": "1234"
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password for the user",
                    "example": "password"
                  }
                },
                "required": [
                  "username_or_email",
                  "otp",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/auth/signup": {
      "post": {
        "summary": "Signup as a seller.",
        "description": "Note, don't send application password or username in the header.",
        "operationId": "signupSeller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "The first name of the user",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The last name of the user",
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user",
                    "example": "user@example.com"
                  },
                  "username": {
                    "type": "string",
                    "description": "The username of the user",
                    "examples": [
                      "johndoe"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user",
                    "example": "password"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the user",
                    "example": "+1234567890"
                  }
                },
                "required": [
                  "first_name",
                  "last_name",
                  "email",
                  "username",
                  "password",
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/GetUserInfoResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication",
          "Seller",
          "Buyer"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/auth/login": {
      "post": {
        "summary": "Login as a seller.",
        "description": "Note, don't send application password or username in the header.",
        "operationId": "loginSeller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email_or_username": {
                    "type": "string",
                    "description": "The email or username of the user as provided during signup",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user as provided during signup",
                    "example": "password"
                  },
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to login from. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  }
                },
                "required": [
                  "email_or_username",
                  "password",
                  "device_name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/auth/login/phone": {
      "post": {
        "summary": "Login as a vendor using phone number.",
        "description": "Note, don't send application password or username in the header.",
        "operationId": "loginSellerWithPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string",
                    "description": "The phone number of the user as provided during signup",
                    "example": "+1234567890"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user as provided during signup",
                    "example": "password"
                  },
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to login from. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  }
                },
                "required": [
                  "phone_number",
                  "password",
                  "device_name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/auth/logout": {
      "delete": {
        "summary": "Log a vendor out of a device",
        "description": "This will log the seller our of this device and delete the application password and refresh tokens for this device.",
        "operationId": "logoutSeller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to refresh the token for. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  }
                },
                "required": [
                  "device_name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/auth/token/refresh": {
      "post": {
        "summary": "Refresh the Application Password for the current logged in seller",
        "description": "Note: Ensure refresh token is not expired before using as if its wrong, the user will be logged out of all devices (for this app id) to protect the user's account.",
        "operationId": "refreshSellerToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to refresh the token for. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  },
                  "refresh_token": {
                    "type": "string",
                    "example": "41dd4e23-0d8f-4e97-87ee-60f2e2245bd0"
                  }
                },
                "required": [
                  "device_name",
                  "refresh_token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-requests": {
      "get": {
        "summary": "Get Bid Requests for current seller.",
        "operationId": "getApiWpDocs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Page number for pagination. Starting from 1. ",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": true,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "menu",
            "in": "query",
            "required": false,
            "description": "Filter by menu name.  (pending): Bids Pending. Sent to this buyer but not yet accepted or rejected and also not expired.\n (accepted): Bids Accepted. Sent to this buyer and accepted.\n (rejected): Bids Rejected. Sent to this buyer and but buyer rejected it. expired: Bids Expired. Sent to this buyer but not accepted or rejected after some time.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "pending",
                "accepted",
                "rejected",
                "expired"
              ],
              "oneOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "description": "All Bids requests sent to this buyer"
                },
                {
                  "enum": [
                    "pending"
                  ],
                  "description": "Bids Pending. Sent to this buyer but not yet accepted or rejected and also not expired."
                },
                {
                  "enum": [
                    "accepted"
                  ],
                  "description": "Bids Accepted. Sent to this buyer and accepted"
                },
                {
                  "enum": [
                    "rejected"
                  ],
                  "description": "Bids Rejected. Sent to this buyer and but buyer rejected it."
                },
                {
                  "enum": [
                    "expired"
                  ],
                  "description": "Bids Expired. Sent to this buyer but not accepted or rejected after some time."
                }
              ],
              "default": "all",
              "examples": [
                {
                  "value": "all",
                  "description": "All Bids requests sent to this buyer"
                },
                {
                  "value": "pending",
                  "description": "Bids Pending. Sent to this buyer but not yet accepted or rejected and also not expired."
                },
                {
                  "value": "accepted",
                  "description": "Bids Accepted. Sent to this buyer and accepted"
                },
                {
                  "value": "rejected",
                  "description": "Bids Rejected. Sent to this buyer and but buyer rejected it."
                },
                {
                  "value": "expired",
                  "description": "Bids Expired. Sent to this buyer but not accepted or rejected after some time."
                }
              ]
            }
          },
          {
            "name": "only_unseen_by_seller_id",
            "in": "query",
            "required": true,
            "description": "Set to 1 to return bid bid requests sent to this seller but this seller has not seen yet.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "only_unseen_for_rating_by_seller_id",
            "in": "query",
            "required": true,
            "description": "Set to 1 Return only bid requests that has offers thats ready to be rated by this seller.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "only_un_delivered_by_seller_id",
            "in": "query",
            "required": true,
            "description": "Set to 1 Return only bid requests that this seller sent offer for and the offer has been accepted by the buyer but ths seller has not marked it as delivered",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bid_requests": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BidRequest"
                      },
                      "description": "List of bid requests"
                    },
                    "found": {
                      "type": "integer",
                      "description": "Total number of bid requests found"
                    }
                  }
                },
                "examples": {
                }
              }
            }
          }
        },
        "tags": [
          "Bid Request",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-request/{id}/seen": {
      "patch": {
        "summary": "Mark a bid request as seen by the current logged in seller. ",
        "operationId": "markBidRequestAsSeen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid request to mark as seen"
          }
        ],
        "responses": {
          "200": {
            "description": "Bid request successfully marked as seen by current logged in seller",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Request",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-request/{id}/reject": {
      "patch": {
        "summary": "Reject a bid request by the current logged in seller. ",
        "operationId": "rejectBidRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid request to reject"
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "description": "Reason for rejecting the bid request",
            "schema": {
              "type": "string",
              "example": "The price is too high."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bid request successfully rejected by current logged in seller",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Request",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-offer/{id}/mark-delivered": {
      "patch": {
        "summary": "Mark a bid offer as delivered by the current logged in seller. ",
        "operationId": "markBidOfferAsDelivered",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to mark as delivered"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-offer/winning-chance": {
      "post": {
        "summary": "Get the winning chance of a bid request. This is the chance of winning this bid request based on the current seller's offer.",
        "operationId": "getWinningChance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bid_offer_object": {
                    "$ref": "#/components/schemas/GetWinningChangePayload"
                  }
                },
                "required": [
                  "bid_offer_object"
                ],
                "example": {
                  "bid_offer_object": {
                    "id": 20596,
                    "bid_request_id": 19983,
                    "calculated_highest_percentage_discount_for_available_and_substitutes": 0,
                    "calculated_lowest_percentage_discount_for_available_and_substitutes": 0,
                    "calculated_percentage_discount_for_available_only": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetWinningChanceResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-offer/{id}/buyer-contact-info": {
      "get": {
        "summary": "Get the contact information of the buyer who made the bid request. Only accessible after the buyer has accepted and paid for the offer",
        "operationId": "getBuyerContactInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to get buyer contact info for"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BuyerContractInfo"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-offer/{id}/rate": {
      "patch": {
        "summary": "Rate a bid offer by the current logged in seller. It means this seller is rating the buyer who accepted this offer. ",
        "operationId": "sellerRateBidOffer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to rate"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "integer",
                    "description": "The rating of the buyer. 1-5.",
                    "example": 4
                  }
                },
                "required": [
                  "rating"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BidOffer"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-offer": {
      "post": {
        "summary": "Create (submit) a new bid offer",
        "operationId": "createBidOffer",
        "description": "For creation, you can provide only the necessary fields. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bid_offer_object": {
                    "$ref": "#/components/schemas/NewBidOffer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateBidOfferResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      },
      "put": {
        "summary": "Update (Resubmit) an existing bid offer",
        "operationId": "updateBidOffer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bid_offer_object": {
                    "$ref": "#/components/schemas/UpdateBidOffer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateBidOfferResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bid-offer/submission/cost": {
      "post": {
        "summary": "Get the cost of submitting a bid offer. Use this to determine if the user has enough balance to submit a bid offer.",
        "operationId": "getBidOfferSubmissionCost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bid_offer_object": {
                    "$ref": "#/components/schemas/CalculateBidOfferCostPayload"
                  }
                }
              },
              "example": {
                "bid_offer_object": {
                  "bid_request_id": 19983,
                  "bid_offer_products": [
                    {
                      "product_id": 45715,
                      "quantity": 1,
                      "status": "available",
                      "bid_offer_product_substitutes": []
                    },
                    {
                      "product_id": 45111,
                      "quantity": 2,
                      "status": "available",
                      "bid_offer_product_substitutes": [
                        {
                          "product_id": 45112,
                          "quantity": 2
                        },
                        {
                          "product_id": 45112,
                          "quantity": 1
                        }
                      ]
                    }
                  ],
                  "discount_for_available_only": 5,
                  "discount_for_available_and_substitute": 0
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BidOfferCostForOfferSubmissionResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Bid Offer",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/notification/count": {
      "get": {
        "summary": "Get the count of notifications for the current logged in seller",
        "operationId": "getSellerNotificationCount",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerNotificationCount"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/membership/details": {
      "get": {
        "summary": "Get the membership details of the current logged in seller.",
        "operationId": "getMembershipDetails",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerMembershipDetailsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Membership",
          "Wallet"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/membership/assign": {
      "post": {
        "summary": "Assign a new membership plan to a seller",
        "operationId": "assignMembershipToSeller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plan_type": {
                    "$ref": "#/components/schemas/PlanType"
                  }
                },
                "required": [
                  "plan_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Membership"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/membership/capabilities": {
      "get": {
        "summary": "Get the capabilities of the current logged in seller's membership plan.",
        "operationId": "getMembershipCapabilities",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerMembershipCapabilitiesResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Membership"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/membership/free-trial/eligibility": {
      "get": {
        "summary": "Check if the current logged in seller is eligible for free trial.",
        "operationId": "checkFreeTrialEligibility",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerFreeTrialEligibilityResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Membership"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/savings/stats": {
      "get": {
        "summary": "Get the savings stats for the current logged in seller.",
        "operationId": "getSavingsStats",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerSavingsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Stats"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/seller/bids/stats": {
      "get": {
        "summary": "Get the bids stats for the current logged in seller.",
        "operationId": "getBidsStats",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerBidsStatsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Stats"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/auth/signup": {
      "post": {
        "summary": "Signup as a buyer.",
        "description": "Note, don't send application password or username in the header.",
        "operationId": "signupBuyer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "The first name of the user",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The last name of the user",
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the user",
                    "example": "user@example.com"
                  },
                  "username": {
                    "type": "string",
                    "description": "The username of the user",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user",
                    "example": "password"
                  }
                },
                "required": [
                  "first_name",
                  "last_name",
                  "email",
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/GetUserInfoResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/auth/login": {
      "post": {
        "summary": "Login as a buyer. Note, every user is a buyer. Don't use this endpoint to login as a seller.",
        "operationId": "loginBuyer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email_or_username": {
                    "type": "string",
                    "description": "The email or username of the user as provided during signup",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user as provided during signup",
                    "example": "password"
                  },
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to login from. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  }
                },
                "required": [
                  "email_or_username",
                  "password",
                  "device_name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/auth/convert-to-seller": {
      "post": {
        "summary": "Convert a buyer to a seller.",
        "description": "If the user is already a seller, you'll still get a success response",
        "operationId": "convertBuyerToSeller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string",
                    "description": "The phone number of the user",
                    "example": "+1234567890"
                  }
                },
                "required": [
                  "phone_number"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUserInfoResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/auth/logout": {
      "delete": {
        "summary": "Log a buyer out of a device",
        "description": "This will log the buyer our of this device and delete the application password and refresh tokens for this device.",
        "operationId": "logoutBuyer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to refresh the token for. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  }
                },
                "required": [
                  "device_name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/auth/token/refresh": {
      "post": {
        "summary": "Refresh the Application Password for the current logged in buyer",
        "description": "Note: Ensure refresh token is not expired before using as if its wrong, the user will be logged out of all devices (for this app id) to protect the user's account.",
        "operationId": "refreshBuyerToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to refresh the token for. e.g. Iphone11. This is used to identify the device for which the token is being refreshed. Also used to allow user to login to different devices",
                    "example": "Iphone11"
                  },
                  "refresh_token": {
                    "type": "string",
                    "example": "41dd4e23-0d8f-4e97-87ee-60f2e2245bd0"
                  }
                },
                "required": [
                  "device_name",
                  "refresh_token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-requests": {
      "get": {
        "summary": "Get Bid Requests for current buyer.",
        "operationId": "getBidRequestsForBuyer",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Page number for pagination. Starting from 1. ",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": true,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "menu",
            "in": "query",
            "required": false,
            "description": "Filter by menu name",
            "schema": {
              "type": "string",
              "enum": [
                "bid_requests",
                "bid_offers",
                "bid_requests_for_rating",
                "bid_offers_for_rating"
              ],
              "default": "bids_submitted"
            }
          },
          {
            "name": "unseen_only_by_buyer_id",
            "in": "query",
            "required": true,
            "description": "Set to 1 to return bid requests that have new offers this buyer has not seen yet.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "only_unseen_for_rating_by_buyer_id",
            "in": "query",
            "required": true,
            "description": "Set to 1 Return only requests unseen by buyer_id for rating. After a buyer accepts and pays for an offer, the buyer can rate the seller after sometime. This will return only the bid requests that the buyer has not rated yet.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bid_requests": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BidRequest"
                      },
                      "description": "List of bid requests"
                    },
                    "found": {
                      "type": "integer",
                      "description": "Total number of bid requests found",
                      "example": 23
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Buyer",
          "Bid Request"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-request": {
      "post": {
        "summary": "Create a new bid request",
        "operationId": "createBidRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "product_ids_and_quantities": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductIdsAndQuantities"
                    },
                    "description": "An Array of objects of woocommerce products and quantities.",
                    "example": [
                      {
                        "product_id": 45715,
                        "quantity": 1
                      },
                      {
                        "product_id": 45111,
                        "quantity": 2
                      }
                    ]
                  },
                  "parent_bid_request_id": {
                    "type": "integer",
                    "description": "The parent bid request id in case this is a re-bide from a previous bid request.",
                    "example": 0
                  },
                  "parent_bid_offer_id": {
                    "type": "integer",
                    "description": "The parent bid offer id in case this is a re-bid on a previous bid offer.",
                    "example": 0
                  }
                },
                "required": [
                  "product_ids_and_quantities"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BidRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Bid Request"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-request/{id}": {
      "delete": {
        "summary": "Delete a bid request. Must be initiated by the buyer who made the bid request.",
        "operationId": "deleteBidRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid request to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Bid request successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Bid Request"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-request/{bid_request_id}/mark-as-paid/order/{order_id}": {
      "put": {
        "summary": "Mark a bid request as paid by the current logged in buyer.",
        "operationId": "markBidRequestAsPaid",
        "parameters": [
          {
            "name": "bid_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid request to mark as paid"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the order created for this bid request"
          }
        ],
        "responses": {
          "200": {
            "description": "Bid request successfully marked as paid by current logged in buyer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid bid request, invalid order, order not paid, no products in order, not all products in order, no accepted offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not allowed (user does not own bid request or order)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Buyer",
          "Bid Request"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-offer/{id}/seen": {
      "patch": {
        "summary": "Mark a bid offer as seen by the current logged in buyer. ",
        "operationId": "markBidOfferAsSeen",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to mark as seen"
          }
        ],
        "responses": {
          "200": {
            "description": "Bid offer successfully marked as seen by current logged in buyer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Bid Offer"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-offer/{id}/rate": {
      "patch": {
        "summary": "Rate a bid offer by the current logged in buyer. ",
        "operationId": "buyerRateBidOffer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to rate"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "integer",
                    "description": "The rating of the seller. 1-5.",
                    "example": 4
                  }
                },
                "required": [
                  "rating"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BidOffer"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Bid Offer"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-offer/{id}/accept": {
      "patch": {
        "summary": "Accept a bid offer by the current logged in buyer. ",
        "operationId": "acceptBidOffer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to accept",
            "example": 46244
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bid_offer_product_substitute_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "The bid offer product substitutes ids to be marked as selected if the method total selected by buyer is available only or available and substitutes",
                    "example": [
                      46247,
                      46248
                    ]
                  },
                  "selected_total_type": {
                    "type": "string",
                    "enum": [
                      "available_only",
                      "available_and_substitute"
                    ],
                    "description": "The type of total the buyer selected for this offer"
                  }
                },
                "required": [
                  "bid_offer_product_substitute_ids",
                  "selected_total_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BidOffer"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Bid Offer"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/bid-offer/{id}/reject": {
      "patch": {
        "summary": "Reject a bid offer by the current logged in buyer. ",
        "operationId": "rejectBidOffer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the bid offer to reject"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason for rejecting the bid offer",
                    "example": "The price is too high."
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Bid Offer"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/notification/count": {
      "get": {
        "summary": "Get the count of notifications for the current logged in buyer",
        "operationId": "getBuyerNotificationCount",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BuyerNotificationCount"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Notification"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/landing-page/product/search": {
      "get": {
        "summary": "Search for products on the landing page",
        "operationId": "searchLandingPageProducts",
        "parameters": [
          {
            "name": "search_text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter the products",
            "example": "milk"
          },
          {
            "name": "max",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of products to return",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPageProductResponse"
          }
        },
        "tags": [
          "Buyer",
          "Landing Page"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/landing-page/trending-deals": {
      "get": {
        "summary": "Get trending deals on the landing page",
        "operationId": "getTrendingDeals",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of products to return",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPageProductResponse"
          }
        },
        "tags": [
          "Buyer",
          "Landing Page"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/buyer/savings/stats": {
      "get": {
        "summary": "Get the savings stats for the current logged in buyer.",
        "description": "This is the savings stats this buyer has accumulated over time considering the amount they would have paid vs the amount they actually pad due to discount given to them by bid2bill sellers ",
        "operationId": "getBuyerSavingsStats",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BuyerSavingsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Buyer",
          "Stats"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/client-device/register": {
      "post": {
        "summary": "Register a new client device for a user. Used for push notification",
        "operationId": "registerClientDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to register. This can be a UUID or any unique identifier for the device. Allows us to identify multiple devces for each user. This used to identify each device for push notification.",
                    "examples": [
                      "32f2b2a3-4c5d-4e6f-8a7b-8c9d0e1f2a3b"
                    ]
                  },
                  "device_type": {
                    "type": "string",
                    "description": "The type of the device. e.g. Android, IOS, Web",
                    "examples": [
                      "mobile"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetClientDeviceResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Client Device"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/client-device/unregister": {
      "delete": {
        "summary": "Unregister a client device for a user. Used for push notification",
        "operationId": "unregisterClientDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to unregister. This can be a UUID or any unique identifier for the device. Allows us to identify multiple devces for each user. This used to identify each device for push notification.",
                    "examples": [
                      "32f2b2a3-4c5d-4e6f-8a7b-8c9d0e1f2a3b"
                    ]
                  },
                  "device_type": {
                    "type": "string",
                    "description": "The type of the device. e.g. Android, IOS, Web",
                    "examples": [
                      "mobile"
                    ]
                  }
                },
                "required": [
                  "device_name",
                  "device_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Client Device"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/client-device/save-fcm-token": {
      "patch": {
        "summary": "Save the FCM token for a client device. Used for push notification",
        "operationId": "saveFcmToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to save the FCM token for. This can be a UUID or any unique identifier for the device. Allows us to identify multiple devces for each user. This used to identify each device for push notification.",
                    "example": "32f2b2a3-4c5d-4e6f-8a7b-8c9d0e1f2a3b"
                  },
                  "device_type": {
                    "type": "string",
                    "description": "The type of the device. e.g. mobile, browser",
                    "example": "mobile"
                  },
                  "fcm_token": {
                    "type": "string",
                    "description": "The FCM token to save for this device.",
                    "example": "fcm_token_example"
                  }
                },
                "required": [
                  "device_name",
                  "fcm_token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Client Device"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/client-device/defer-push-notification": {
      "patch": {
        "summary": "Defer (When a user says Remind me later)  push notification for a client device. ",
        "description": "This means the user wants us to remind them to accept push notifications later.",
        "operationId": "deferPushNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to defer push notification for. This can be a UUID or any unique identifier for the device. Allows us to identify multiple devces for each user. This used to identify each device for push notification.",
                    "examples": [
                      "32f2b2a3-4c5d-4e6f-8a7b-8c9d0e1f2a3b"
                    ]
                  },
                  "device_type": {
                    "type": "string",
                    "description": "The type of the device. e.g. mobile, browser",
                    "examples": [
                      "mobile"
                    ]
                  }
                },
                "required": [
                  "device_name",
                  "device_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Client Device"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/woo-products/{id}/product-substitute": {
      "get": {
        "summary": "Get the product substitutes for a product",
        "operationId": "getProductSubstitutes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the product to get substitutes for",
            "example": 45109
          },
          {
            "name": "search_text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter the substitutes",
            "example": "milk"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WooProductSubstitute"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Woocommerce"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/location": {
      "get": {
        "summary": "Get the location of the current logged in user",
        "operationId": "getUserLocation",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUserLocationResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Location"
        ]
      },
      "put": {
        "summary": "Update the location of the current logged in user",
        "operationId": "updateUserLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLocation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Location"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/info": {
      "get": {
        "summary": "Get the information of the current logged in user",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUserInfoResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/phone/verify/send-otp": {
      "post": {
        "summary": "Send OTP to the current logged in user's existing phone number for verification. If the user has not set a phone number, this will return an error.",
        "operationId": "sendPhoneVerificationOtp",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/phone/verify/verify-otp": {
      "post": {
        "summary": "Verify OTP sent to the user phone number for verification.",
        "operationId": "verifyPhoneVerificationOtp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "The OTP sent to the user phone number",
                    "example": "1234"
                  }
                },
                "required": [
                  "otp"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/phone/reset-password": {
      "post": {
        "summary": "Reset the password of the current logged in user using phone number verification.",
        "operationId": "resetPasswordUsingPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "The OTP sent to the user phone number",
                    "example": "1234"
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password for the user",
                    "example": "newpassword"
                  }
                },
                "required": [
                  "otp",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/profile/phone": {
      "put": {
        "summary": "Update the phone number of the current logged in user",
        "operationId": "updateUserPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string",
                    "description": "The phone number of the user",
                    "examples": [
                      "+1234567890"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/user/jwt-auth/token": {
      "post": {
        "summary": "Get a JWT token for the current logged in user",
        "operationId": "getJwtToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username or email of the user to get the token for. This is used to identify the user for push notification.",
                    "examples": [
                      "user1@emal.com"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the user to get the token for.",
                    "examples": [
                      "password123"
                    ]
                  },
                  "device_name": {
                    "type": "string",
                    "description": "The name of the device to get the token for. This can be a UUID or any unique identifier for the device. Allows us to identify multiple devces for each user. This used to identify each device for push notification.",
                    "examples": [
                      "32f2b2a3-4c5d-4e6f-8a7b-8c9d0e1f2a3b"
                    ]
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/membership/plans": {
      "get": {
        "summary": "Get the membership plans",
        "operationId": "getMembershipPlans",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetMembershipPlansResponse"
          }
        },
        "tags": [
          "Membership",
          "Wallet"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/test-helper/test-user": {
      "post": {
        "summary": "Create a test user (For development only)",
        "operationId": "createTestUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "test_nonce": {
                    "type": "string",
                    "description": "The test nonce to verify the request.",
                    "example": "3e4a98d1-93e5-4277-ab47-5f5633d8a23e"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of user to create. Possible values: 'buyer', 'seller'.",
                    "example": "buyer"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the test user.",
                    "example": "testuser@example.com"
                  },
                  "username": {
                    "type": "string",
                    "description": "The username for the test user.",
                    "example": "testuser"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the test user.",
                    "example": "aaaa",
                    "minLength": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Testing"
        ]
      },
      "delete": {
        "summary": "Delete a test user",
        "operationId": "deleteTestUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "admin_nonce": {
                    "type": "string",
                    "description": "The admin nonce to verify the request.",
                    "example": "3e4a98d1-93e5-4277-ab47-5f5633d8a23e"
                  },
                  "delete_these": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The user stuff to delete. Possible values: 'all', 'bid_requests', 'bid_offers', 'notifications', 'saved_products', 'saved_bids', 'saved_bid_offers', 'saved_bid_requests'.",
                    "example": [
                      "all"
                    ]
                  },
                  "username": {
                    "type": "string",
                    "description": "The username of the test user to delete.",
                    "example": "testuser"
                  }
                },
                "required": [
                  "admin_nonce",
                  "delete_these",
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Testing"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/test-helper/test-data": {
      "post": {
        "summary": "Create test users with products at once. Delete users if existing by username. (For developers only)",
        "operationId": "createTestData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "test_nonce": {
                    "type": "string",
                    "description": "The test nonce to verify the request.",
                    "example": "3e4a98d1-93e5-4277-ab47-5f5633d8a23e"
                  },
                  "new_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CreateTestUser"
                    }
                  },
                  "new_products": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CreateTestProduct"
                    }
                  },
                  "delete_all_products": {
                    "type": "boolean",
                    "description": "Delete all test products previously created before creating new ones.",
                    "example": true
                  }
                },
                "required": [
                  "test_nonce",
                  "new_users",
                  "new_products",
                  "delete_all_products"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateTestUserAndProductResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Testing"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/wallet/history": {
      "get": {
        "summary": "Get the wallet transactions for the current logged in seller.",
        "operationId": "getWalletTransactions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Page number for pagination. Starting from 1.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": true,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "created_at_start",
            "in": "query",
            "required": false,
            "description": "Start date for filtering transactions. Format: YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-01 00:00:00"
            }
          },
          {
            "name": "created_at_stop",
            "in": "query",
            "required": false,
            "description": "End date for filtering transactions. Format: YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2029-01-31 23:59:59"
            }
          },
          {
            "name": "updated_at_start",
            "in": "query",
            "required": false,
            "description": "Start date for filtering transactions by last updated date. Format: YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-01 00:00:00"
            }
          },
          {
            "name": "updated_at_stop",
            "in": "query",
            "required": false,
            "description": "End date for filtering transactions by last updated date. Format: YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2029-01-31 23:59:59"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter transactions by status. Possible values: 'pending', 'completed', 'failed'.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "pending",
                "succeeded",
                "failed"
              ],
              "default": "all",
              "examples": [
                "all"
              ]
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Sort transactions by a specific field. Possible values: 'id', 'amount', 'created_at', 'updated_at'. Default is 'created_at'.",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "amount",
                "created_at",
                "updated_at"
              ],
              "default": "created_at",
              "examples": [
                "created_at"
              ]
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "description": "Sort order for the transactions. Possible values: 'asc', 'desc'. Default is 'desc'.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC",
              "examples": [
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerWalletTransactionsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Wallet"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/wallet/stats": {
      "get": {
        "summary": "Get the wallet stats for the current logged in seller.",
        "operationId": "getWalletStats",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SellerWalletStatsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Seller",
          "Wallet"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/stripe/payment-intent": {
      "post": {
        "summary": "Create a Stripe payment intent for a product purchase",
        "operationId": "createStripePaymentIntent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount to charge in the smallest currency unit (e.g., cents for USD).",
                    "examples": [
                      10
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of the product being purchased.",
                    "examples": [
                      1
                    ]
                  },
                  "product_name": {
                    "type": "string",
                    "description": "The name of the product being purchased.",
                    "examples": [
                      "Test Product"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the product or purchase.",
                    "examples": [
                      "Purchase of Test Product"
                    ]
                  },
                  "redirect_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL to redirect the user after payment completion.",
                    "examples": [
                      "https://demo.bid2bill.com/checkout/thank-you/"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "quantity",
                  "product_name",
                  "redirect_url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StripePaymentIntentResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Wallet",
          "Seller"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/stripe/payment-intent-stripe-intent": {
      "post": {
        "summary": "Create a Stripe payment intent for a product purchase",
        "operationId": "createStripePaymentIntentStripeIntent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount to charge in the smallest currency unit (e.g., cents for USD).",
                    "examples": [
                      10
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of the product being purchased.",
                    "examples": [
                      1
                    ]
                  },
                  "product_name": {
                    "type": "string",
                    "description": "The name of the product being purchased.",
                    "examples": [
                      "Test Product"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the product or purchase.",
                    "examples": [
                      "Purchase of Test Product"
                    ]
                  },
                  "redirect_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL to redirect the user after payment completion.",
                    "examples": [
                      "https://demo.bid2bill.com/checkout/thank-you/"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "quantity",
                  "product_name",
                  "redirect_url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StripePaymentIntentResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Wallet",
          "Seller"
        ]
      }
    },
    "/wp-json/wc/v3/customers/{id}": {
      "get": {
        "summary": "Get a WooCommerce customer by ID",
        "operationId": "getWooCustomerById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the WooCommerce customer to retrieve"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WooCustomerResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Woocommerce"
        ]
      }
    },
    "/wp-json/bid-2-bill/v1/": {
      "get": {
        "summary": "Get the API details for this WP API.",
        "operationId": "getApiInfo",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          }
        },
        "tags": [
          "Testing"
        ]
      }
    },
    "/wp-json/wp/v2/users/me/": {
      "get": {
        "summary": "Get the current logged in user details",
        "operationId": "getCurrentUserDetails",
        "responses": {
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/wp-json/bid-2-bill/user/logout": {
      "post": {
        "summary": "Logout the current logged in user",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BooleanResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    }
  },
  "components": {
    "examples": {
      "BidOffer": {
        "value": {
          "id": 46244,
          "key": "BIDOFRQA26 040700001",
          "bid_request_id": 45859,
          "bid_request_key": "BIDREQQA25 022300003",
          "seller_id": 96,
          "status": "pending",
          "current_seller_ratting": 0,
          "seller_rating": 0,
          "seller_rating_description": "-1",
          "seller_rating_datetime": "",
          "its_time_for_seller_rating": false,
          "buyer_rating": 0,
          "buyer_rating_description": "",
          "buyer_rating_datetime": "",
          "its_time_for_buyer_rating": false,
          "seller_country": "Nigeria",
          "seller_state": "",
          "seller_address": "",
          "discount_for_available_and_substitute": 4,
          "discount_for_available_only": 3,
          "delivery_date": "2025-03-21",
          "delivery_time": "after_noon",
          "winning_change": "red",
          "offers_credit": "yes",
          "offers_credit_days": 5,
          "bid_offer_products": [
            {
              "id": 46245,
              "bid_offer_id": "46244",
              "created_at": "2026-04-07 20:01:19",
              "updated_at": "2026-04-07 20:01:19",
              "quantity": 2,
              "status": "available",
              "product_id": 32506,
              "product_title": "Test Product 5",
              "product_url": "",
              "product_price": 6,
              "product_price_html": "<del aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>45.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></del> <span class=\"screen-reader-text\">Original price was: 45.00&nbsp;&#x62f;.&#x625;.</span><ins aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>6.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></ins><span class=\"screen-reader-text\">Current price is: 6.00&nbsp;&#x62f;.&#x625;.</span>",
              "bid_offer_product_substitutes": [],
              "sub_total_available_only": 12,
              "sub_total_lowest_substitutes": 0,
              "sub_total_highest_substitutes": 0,
              "bought_by_buyer": "",
              "product_image_url": "https://demo.bid2bill.com/wp-content/uploads/2024/04/qb2ivfv3_0-150x150.jpg"
            },
            {
              "id": 46246,
              "bid_offer_id": "46244",
              "created_at": "2026-04-07 20:01:19",
              "updated_at": "2026-04-07 20:01:19",
              "quantity": 1,
              "status": "substitute",
              "product_id": 32505,
              "product_title": "Test Product 4",
              "product_url": "",
              "product_price": 12,
              "product_price_html": "<del aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>14.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></del> <span class=\"screen-reader-text\">Original price was: 14.00&nbsp;&#x62f;.&#x625;.</span><ins aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>12.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></ins><span class=\"screen-reader-text\">Current price is: 12.00&nbsp;&#x62f;.&#x625;.</span>",
              "bid_offer_product_substitutes": [
                {
                  "id": 46247,
                  "bid_offer_product_id": "46246",
                  "created_at": "2026-04-07 20:01:19",
                  "updated_at": "2026-04-07 20:01:19",
                  "quantity": 1,
                  "product_id": 34141,
                  "product_title": "Ice Cream",
                  "product_url": "https://demo.bid2bill.com/product/ice-cream/?attribute_flavor=Choco&attribute_size=75ml",
                  "product_price": 4,
                  "product_price_html": "<span class=\"woocommerce-Price-amount amount\"><bdi>4.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>",
                  "calculated_sub_total": 4,
                  "selected_by_buyer": "",
                  "bought_by_buyer": "",
                  "product_image_url": "https://demo.bid2bill.com/wp-content/uploads/2024/09/8886451085603622e4746b494989e-small.png"
                },
                {
                  "id": 46248,
                  "bid_offer_product_id": "46246",
                  "created_at": "2026-04-07 20:01:19",
                  "updated_at": "2026-04-07 20:01:19",
                  "quantity": 1,
                  "product_id": 32506,
                  "product_title": "Test Product 5",
                  "product_url": "https://demo.bid2bill.com/product/test-product-5/",
                  "product_price": 6,
                  "product_price_html": "<del aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>45.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></del> <span class=\"screen-reader-text\">Original price was: 45.00&nbsp;&#x62f;.&#x625;.</span><ins aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>6.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></ins><span class=\"screen-reader-text\">Current price is: 6.00&nbsp;&#x62f;.&#x625;.</span>",
                  "calculated_sub_total": 6,
                  "selected_by_buyer": "",
                  "bought_by_buyer": "",
                  "product_image_url": "https://demo.bid2bill.com/wp-content/uploads/2024/04/qb2ivfv3_0-150x150.jpg"
                }
              ],
              "sub_total_available_only": 12,
              "sub_total_lowest_substitutes": 4,
              "sub_total_highest_substitutes": 6,
              "bought_by_buyer": "",
              "product_image_url": "https://demo.bid2bill.com/wp-content/uploads/2024/04/5052197050707-1-1-150x150.png"
            },
            {
              "id": 46249,
              "bid_offer_id": "46244",
              "created_at": "2026-04-07 20:01:19",
              "updated_at": "2026-04-07 20:01:19",
              "quantity": 1,
              "status": "not_available",
              "product_id": 32504,
              "product_title": "Test Product 3",
              "product_url": "",
              "product_price": 4,
              "product_price_html": "<del aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>7.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></del> <span class=\"screen-reader-text\">Original price was: 7.00&nbsp;&#x62f;.&#x625;.</span><ins aria-hidden=\"true\"><span class=\"woocommerce-Price-amount amount\"><bdi>4.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span></ins><span class=\"screen-reader-text\">Current price is: 4.00&nbsp;&#x62f;.&#x625;.</span>",
              "bid_offer_product_substitutes": [],
              "sub_total_available_only": 4,
              "sub_total_lowest_substitutes": 0,
              "sub_total_highest_substitutes": 0,
              "bought_by_buyer": "",
              "product_image_url": "https://demo.bid2bill.com/wp-content/uploads/2024/04/6295120046173-1-small.png"
            }
          ],
          "created_at": "2026-04-07 20:01:19",
          "updated_at": "2026-04-07 20:01:19",
          "parent_bid_request_id": 45859,
          "order_id": 0,
          "calculated_total_available_only_amount": 12,
          "calculated_total_amount_lowest_substitute": 4,
          "calculated_total_amount_highest_substitutes": 6,
          "calculated_percentage_discount_for_available_only": 25,
          "calculated_lowest_percentage_discount_for_available_and_substitutes": 25,
          "calculated_highest_percentage_discount_for_available_and_substitutes": 22.22,
          "calculated_possible_highest_discount": 25,
          "seen_by_buyer": "",
          "buyer_selected_available_only_or_available_and_substitute": "",
          "buyer_rejected_reason": "",
          "plan_type": "premium_3_month",
          "plan_amount_deductible_for_offer_submission": 0.5,
          "plan_amount_deductible_for_offer_submission_deducted": "yes",
          "plan_amount_saved_for_premium_plan_for_successful_offer_submission": 0.5,
          "plan_percent_deductible_for_successful_offer_acceptance": 0.5,
          "plan_amount_deductible_for_successful_offer_acceptance": 0,
          "plan_amount_deductible_for_offer_acceptance_deducted": "no",
          "plan_amount_saved_for_premium_plan_for_successful_offer_acceptance": 0,
          "plan_percent_saved_for_premium_plan_for_successful_offer_acceptance": 0,
          "plan_basic_percent_deductible_for_successful_offer_acceptance_now": 1,
          "plan_premium_percent_deductible_for_successful_offer_acceptance_now": 0.5
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Wordpress Application Password Authentication"
      }
    },
    "responses": {
      "WooCustomerResponse": {
        "description": "WooCommerce customer response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WooCustomer"
            }
          }
        }
      },
      "SellerFreeTrialEligibilityResponse": {
        "description": "Seller free trial eligibility response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "eligibility": {
                  "$ref": "#/components/schemas/SellerEligibleFreePremiumTrial"
                }
              }
            }
          }
        }
      },
      "SellerMembershipCapabilitiesResponse": {
        "description": "Seller membership capabilities response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "capabilities": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellerMembershipCapabilities"
                  },
                  "description": "List of seller membership capabilities"
                }
              }
            }
          }
        }
      },
      "SellerWalletStatsResponse": {
        "description": "Seller wallet stats response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WalletStats"
            }
          }
        }
      },
      "StripePaymentIntentResponse": {
        "description": "Stripe payment checkout session response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StripePaymentSession"
            }
          }
        }
      },
      "SellerWalletTransactionsResponse": {
        "description": "Seller wallet transactions response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellerWalletTransaction"
                  },
                  "description": "List of wallet transactions for the seller"
                },
                "total_count": {
                  "type": "integer",
                  "description": "Total number of wallet transactions for the seller"
                },
                "total_pages": {
                  "type": "integer",
                  "description": "Total number of pages for pagination"
                },
                "current_page": {
                  "type": "integer",
                  "description": "Current page number"
                }
              }
            }
          }
        }
      },
      "GetUserInfoResponse": {
        "description": "User information response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserInfo"
            }
          }
        }
      },
      "GetClientDeviceResponse": {
        "description": "Client device response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClientDevice"
            }
          }
        }
      },
      "GetWinningChanceResponse": {
        "description": "Winning chance response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetWinningChanceResponse"
            }
          }
        }
      },
      "CreateTestUserAndProductResponse": {
        "description": "Products and user ids by title",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "products": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "product_id": {
                        "type": "integer",
                        "description": "Product ID"
                      },
                      "product_title": {
                        "type": "string",
                        "description": "Product title"
                      }
                    }
                  },
                  "description": "Products and their IDs by title"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user_id": {
                        "type": "integer",
                        "description": "User ID"
                      },
                      "username": {
                        "type": "string",
                        "description": "Username"
                      }
                    }
                  },
                  "description": "Users and their IDs by username"
                }
              }
            }
          }
        }
      },
      "RefreshTokenResponse": {
        "description": "Refresh token response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RefreshTokenDetail"
            }
          }
        }
      },
      "LoginResponse": {
        "description": "Login response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginTokenDetail"
            }
          }
        }
      },
      "CreateTestDataResponse": {
        "description": "Create test data response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "test_users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestUser"
                  }
                },
                "test_products": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestProduct"
                  }
                }
              }
            }
          }
        }
      },
      "GetUserLocationResponse": {
        "description": "Get user location response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserLocation"
            }
          }
        }
      },
      "SaveUserLocationResponse": {
        "description": "Save user location response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserLocation"
            }
          }
        }
      },
      "TrendingDealsResponse": {
        "description": "Trending deals response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TrendingDeals"
            }
          }
        }
      },
      "LandingPageProductResponse": {
        "description": "Landing page product response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LandingPageProduct"
            }
          }
        }
      },
      "SellerBidsStatsResponse": {
        "description": "Seller bids stats response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SellerBidStats"
            }
          }
        }
      },
      "BuyerSavingsResponse": {
        "description": "This is the savings stats this buyer has accumulated over time considering the amount they would have paid vs the amount they actually pad due to discount given to them by bid2bill sellers ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SellerSavings"
            }
          }
        }
      },
      "SellerSavingsResponse": {
        "description": "Seller Savings response. The amount of points a seller has saved over time as a result of being a premium member",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SellerSavings"
            }
          }
        }
      },
      "BidOfferCostForOfferSubmissionResponse": {
        "description": "Cost of offer submission response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BidOfferCostOfOfferSubmission"
            }
          }
        }
      },
      "SellerMembershipDetailsResponse": {
        "description": "Seller membership details response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SellerMembershipDetails"
            }
          }
        }
      },
      "WooProductSubstitute": {
        "description": "Woo product substitute object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WooProductSubstitute"
            }
          }
        }
      },
      "BuyerContractInfo": {
        "description": "Buyer contract object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BuyerContactInfo"
            }
          }
        }
      },
      "BooleanResponse": {
        "description": "Boolean response",
        "content": {
          "application/json": {
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        }
      },
      "BidOffer": {
        "description": "Bid offer object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BidOffer"
            }
          }
        }
      },
      "CreateBidOfferResponse": {
        "description": "Bid offer creation & Update response. Points are deducted for offer submission.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "new_offer": {
                  "$ref": "#/components/schemas/BidOffer"
                },
                "amount_to_deduct_for_offer_submission": {
                  "type": "number",
                  "description": "Amount of points deducted for offer submission",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "UpdateBidOfferResponse": {
        "description": "Bid offer Update response. Points are deducted from seller on each update as it means user is resubmitting the offer",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "new_offer": {
                  "$ref": "#/components/schemas/BidOffer"
                },
                "amount_to_deduct_for_offer_submission": {
                  "type": "number",
                  "description": "Amount of points deducted for offer submission",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BidRequestResponse": {
        "description": "Bid request response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BidRequest"
            }
          }
        }
      },
      "SellerNotificationCount": {
        "description": "Notification count response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SellerNotifications"
            }
          }
        }
      },
      "BuyerNotificationCount": {
        "description": "Notification count response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BuyerNotifications"
            }
          }
        }
      },
      "GetMembershipPlansResponse": {
        "description": "Membership plans response",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MembershipPlan"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "WooCustomer": {
        "type": "object",
        "description": "WooCommerce customer object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the customer",
            "example": 123
          }
        }
      },
      "SellerEligibleFreePremiumTrial": {
        "oneOf": [
          {
            "type": "null"
          },
          {
            "type": "object",
            "description": "Seller is eligible to try out premium features for free via a trial by free credit",
            "properties": {
              "free_premium_trial_by_credit": {
                "$ref": "#/components/schemas/FreeTrialState"
              }
            }
          },
          {
            "type": "object",
            "description": "Seller is eligible to try out premium features for free via a trial by time. e.g. 7-Day free trial",
            "properties": {
              "free_premium_trial_by_time": {
                "$ref": "#/components/schemas/FreeTrialState"
              }
            }
          }
        ]
      },
      "FreeTrialState": {
        "type": "object",
        "description": "State of the free trial for the seller",
        "properties": {
          "free_premium_trial_by_credit": {
            "type": "boolean",
            "description": "Whether the free trial is by credit",
            "example": true
          },
          "free_premium_trial_amount": {
            "type": "integer",
            "description": "Amount of the free premium trial in points",
            "example": 20
          },
          "free_premium_trial_by": {
            "type": "string",
            "description": "Type of free premium trial",
            "example": "premium_free_by_credit"
          },
          "free_premium_trial_duration_days": {
            "type": "integer",
            "description": "Duration of the free premium trial in days",
            "example": 4
          },
          "free_premium_trial_expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date of the free premium trial",
            "example": "2023-06-12T00:00:00Z"
          },
          "today_at": {
            "type": "string",
            "format": "date-time",
            "description": "Current date and time when the trial state was checked",
            "example": "2023-06-08T00:00:00Z"
          }
        }
      },
      "SellerMembershipCapabilities": {
        "type": "object",
        "description": "Seller membership capabilities",
        "properties": {
          "can_add_substitute_product": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "can_use_detailed_location_for_bids": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "can_see_offer_winning_chance": {
            "$ref": "#/components/schemas/YesOrNo"
          }
        }
      },
      "WalletStats": {
        "type": "object",
        "description": "Wallet statistics for the user",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "Total number of wallet transactions",
            "example": 10
          },
          "total_amount": {
            "type": "number",
            "description": "Total amount of wallet transactions",
            "example": 100.0
          },
          "pending_count": {
            "type": "integer",
            "description": "Number of pending wallet transactions",
            "example": 2
          },
          "pending_amount": {
            "type": "number",
            "description": "Total amount of pending wallet transactions",
            "example": 20.0
          },
          "succeeded_count": {
            "type": "integer",
            "description": "Number of succeeded wallet transactions",
            "example": 7
          },
          "succeeded_amount": {
            "type": "number",
            "description": "Total amount of succeeded wallet transactions",
            "example": 70.0
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of failed wallet transactions",
            "example": 1
          },
          "failed_amount": {
            "type": "number",
            "description": "Total amount of failed wallet transactions",
            "example": 10.0
          },
          "balance": {
            "$ref": "#/components/schemas/SellerMembershipDetails/properties/wallet_balance"
          }
        }
      },
      "StripePaymentSession": {
        "type": "object",
        "description": "Stripe payment session object. See full documentation at https://docs.stripe.com/api/checkout/sessions/object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Stripe payment session",
            "example": "cs_test_a1b2c3d4e5f6g7h8i9j0"
          }
        }
      },
      "SellerWalletTransaction": {
        "type": "object",
        "description": "Seller wallet transaction object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the wallet transaction",
            "examples": [
              20596
            ]
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user this transaction belongs to",
            "examples": [
              20596
            ]
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "The amount of the transaction",
            "examples": [
              100.50
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the transaction. Possible values: 'pending', 'succeeded', 'failed'",
            "examples": [
              "pending",
              "succeeded",
              "failed"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the transaction",
            "examples": [
              "Payment for bid offer submission"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time this transaction was created",
            "examples": [
              "2023-10-01 12:00:00"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time this transaction was last updated",
            "examples": [
              "2023-10-01 12:00:00"
            ]
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time this transaction expires",
            "examples": [
              "2023-10-01 12:00:00"
            ]
          },
          "has_expired": {
            "type": "boolean",
            "description": "Whether the transaction has expired",
            "examples": [
              true,
              false
            ]
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "description": "User information",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user",
            "example": 20596
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "testuser"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user",
            "examples": [
              "testuser@email.com"
            ]
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the user",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the user",
            "example": "Doe"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user",
            "example": "+1234567890"
          },
          "user_type": {
            "type": "string",
            "description": "The type of user. Possible values: 'buyer', 'seller'.",
            "example": "buyer"
          },
          "phone_verified": {
            "type": "boolean",
            "description": "Whether the user's phone number is verified",
            "examples": [
              true,
              false
            ]
          }
        }
      },
      "ClientDevice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the client device",
            "example": 20596
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user this device belongs to",
            "example": 20596
          },
          "device_name": {
            "type": "string",
            "description": "The name of the device. Preferably UUID to identify each user's device.",
            "examples": [
              "fjf8f49j49f94fj4f99"
            ]
          },
          "device_type": {
            "type": "string",
            "description": "The type of the device. Possible values: 'mobile', 'browser'.",
            "examples": [
              "mobile",
              "browser"
            ]
          },
          "fcm_token": {
            "type": "string",
            "description": "The FCM token for this device",
            "examples": [
              "fjf8f49j49f94fj4f99"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time this device was registered",
            "examples": [
              "2023-10-01 12:00:00"
            ]
          },
          "fcm_deferred_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time this device was deferred. The time the user said 'remind me later'.",
            "examples": [
              "2023-10-01 12:00:00"
            ]
          },
          "want_fcm_token": {
            "type": "boolean",
            "description": "Whether the user wants to receive FCM notifications on this device",
            "example": true
          }
        }
      },
      "CalculateBidOfferCostPayload": {
        "type": "object",
        "properties": {
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the bid request this offer is for",
            "example": 20596
          },
          "bid_offer_products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "integer",
                  "description": "The ID of the product",
                  "example": 20596
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity of the product",
                  "example": 2
                },
                "status": {
                  "type": "string",
                  "description": "The status of the product. Possible values: 'available', 'substitute', 'not_available'.",
                  "example": "available"
                },
                "bid_offer_product_substitutes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "product_id": {
                        "type": "integer",
                        "description": "The ID of the substitute product",
                        "example": 20596
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "The quantity of the substitute product",
                        "example": 2
                      }
                    }
                  },
                  "description": "The substitutes for this product"
                }
              }
            },
            "description": "The products in this bid offer. This is the list of products the seller is offering to the buyer."
          },
          "discount_for_available_only": {
            "type": "integer",
            "description": "The discount for available only. This is the discount the seller is offering for available products only.",
            "example": 5
          },
          "discount_for_available_and_substitute": {
            "type": "integer",
            "description": "The discount for available and substitute. This is the discount the seller is offering for available products and substitutes.",
            "example": 2
          }
        },
        "required": [
          "bid_request_id",
          "bid_offer_products",
          "discount_for_available_only",
          "discount_for_available_and_substitute"
        ]
      },
      "GetWinningChanceResponse": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Winning chance color. Possible values: 'green', 'amber', 'red'.",
            "oneOf": [
              {
                "enum": [
                  "green"
                ],
                "description": "This seller has a high chance of winning the bid."
              },
              {
                "enum": [
                  "amber"
                ],
                "description": "This seller has a moderate chance of winning the bid."
              },
              {
                "enum": [
                  "red"
                ],
                "description": "This seller has a low chance of winning the bid."
              }
            ]
          }
        }
      },
      "SellerBidRequestDashboardMenuOption": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "The options to filter seller's bid request in the seller's dashboard.",
            "oneOf": [
              {
                "enum": [
                  "all"
                ],
                "description": "All Bids requests sent to this buyer"
              },
              {
                "enum": [
                  "pending"
                ],
                "description": "Bids Pending. Sent to this buyer but not yet accepted or rejected and also not expired."
              },
              {
                "enum": [
                  "accepted"
                ],
                "description": "Bids Accepted. Sent to this buyer and accepted"
              },
              {
                "enum": [
                  "rejected"
                ],
                "description": "Bids Rejected. Sent to this buyer and but buyer rejected it."
              },
              {
                "enum": [
                  "expired"
                ],
                "description": "Bids Expired. Sent to this buyer but not accepted or rejected after some time."
              }
            ]
          }
        }
      },
      "GetWinningChangePayload": {
        "type": "object",
        "description": "Winning chance payload. Note all this fields also exist in a BidOffer object. So if you have the whole bid offer object from an existing bid offer, you can use it to get the winning chance.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the bid offer. If you this offer has not been submitted yet, it means the offer has not been created and will not have an id. Set this to 0 in that case.",
            "example": 20596
          },
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the bid request",
            "example": 19983
          },
          "calculated_highest_percentage_discount_for_available_and_substitutes": {
            "type": "integer",
            "description": "The calculated highest percentage discount for available and substitutes. Pick all available products and all substitutes with highest price and fnd the percentage discount. Use discount for available and substitutes",
            "example": 20596
          },
          "calculated_lowest_percentage_discount_for_available_and_substitutes": {
            "type": "integer",
            "description": "The calculated lowest percentage discount for available and substitutes. Pick all available products and all substitutes with lowest price and fnd the percentage discount. Use discount for available and substitutes",
            "example": 20596
          },
          "calculated_percentage_discount_for_available_only": {
            "type": "integer",
            "description": "The calculated percentage discount for available only. Pick all available products only and find the percentage discount. Use discount for available only",
            "example": 5
          }
        },
        "required": [
          "id",
          "bid_request_id",
          "calculated_highest_percentage_discount_for_available_and_substitutes",
          "calculated_lowest_percentage_discount_for_available_and_substitutes",
          "calculated_percentage_discount_for_available_only"
        ]
      },
      "MembershipPlan": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The membership plan value. Used when assigning the plan to a user.",
            "example": "basic_1_month"
          },
          "name": {
            "type": "string",
            "description": "The name of the membership plan",
            "example": "Basic 1 Month"
          },
          "price": {
            "type": "number",
            "description": "The price of the membership plan",
            "example": 19.99
          },
          "price_html": {
            "type": "string",
            "description": "The HTML representation of the price"
          },
          "price_for_offer_submission": {
            "type": "number",
            "description": "The price for offer submission in points",
            "example": 0.5
          },
          "price_for_offer_submission_html": {
            "type": "string",
            "description": "The HTML representation of the price for offer submission"
          },
          "percent_to_charge_for_offer_acceptance": {
            "type": "number",
            "description": "The percentage to charge for offer acceptance",
            "example": 0.5
          }
        }
      },
      "RefreshTokenDetail": {
        "type": "object",
        "properties": {
          "application_password": {
            "type": "string",
            "description": "The application password. Expires in 1 day or less. Note, once seen, its deleted. Ensure to encrypt and store in user's device and use for subsequent requests (with the user name).",
            "example": "application_password"
          },
          "expires_at": {
            "type": "integer",
            "description": "The expiration date and time of the application password",
            "example": "1746022121"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token. Expires in 7 days or before.",
            "example": "Rsw4owZhhR7qhJ0fFlrYZu0Vxt1NkCjc2xru23aP"
          },
          "refresh_expires_at": {
            "type": "integer",
            "description": "The expiration date and time of the refresh token",
            "example": "1746022121"
          }
        }
      },
      "LoginTokenDetail": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "The app ID. Identifier for Bid2Bill's bids related client apps.",
            "example": "app_id"
          },
          "application_password": {
            "type": "string",
            "description": "The application password. Expires in 1 day or less. Note, once seen, its deleted. Ensure to encrypt and store in user's device and use for subsequent requests (with the user name).",
            "example": "MjdKei82R7qhJ0fFlrYZu0Vxt1NkCjc2xru23aP"
          },
          "token": {
            "type": "string",
            "description": "The token. This is same as the application password. Expires in 1 day or less. Note, once seen, its deleted. Ensure to encrypt and store in user's device and use for subsequent requests (with the user name).",
            "example": "MjdKei82R7qhJ0fFlrYZu0Vxt1NkCjc2xru23aP"
          },
          "user_id": {
            "type": "integer",
            "description": "The user ID.",
            "example": 123
          },
          "username": {
            "type": "string",
            "description": "The username of the user.",
            "example": "testuser"
          },
          "user_display_name": {
            "type": "string",
            "description": "The display name of the user.",
            "examples": [
              "Test User"
            ]
          },
          "user_email": {
            "type": "string",
            "description": "The email address of the user.",
            "examples": [
              "user@example.com"
            ]
          },
          "user_nicename": {
            "type": "string",
            "description": "The nicename of the user.",
            "examples": [
              "testuser"
            ]
          },
          "expires_at": {
            "type": "integer",
            "description": "The expiration date and time of the application password",
            "example": "1746022121"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token. Expires in 7 days or before.",
            "example": "Rsw4owZhhR7qhJ0fFlrYZu0Vxt1NkCjc2xru23aP"
          },
          "refresh_expires_at": {
            "type": "integer",
            "description": "The expiration date and time of the refresh token",
            "example": "1746022121"
          }
        }
      },
      "TestProduct": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The ID of the product",
            "example": 123
          },
          "product_title": {
            "type": "string",
            "description": "The title of the product",
            "example": "Sample Product"
          },
          "product_price": {
            "type": "number",
            "description": "The price of the product",
            "example": 19.99
          }
        }
      },
      "TestUser": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "description": "The ID of the user",
            "example": 123
          },
          "username": {
            "type": "string",
            "description": "The username of the user to delete",
            "example": "testuser"
          }
        }
      },
      "CreateTestUser": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of user to create. Possible values: 'buyer', 'seller'.",
            "example": "buyer"
          },
          "email": {
            "type": "string",
            "description": "The email address for the test user.",
            "example": "testuser@example.com"
          },
          "username": {
            "type": "string",
            "description": "The username for the test user.",
            "example": "testuser"
          },
          "password": {
            "type": "string",
            "description": "The password for the test user.",
            "example": "aaaa",
            "minLength": 3
          }
        }
      },
      "CreateTestProduct": {
        "type": "object",
        "properties": {
          "product_title": {
            "type": "string",
            "description": "The title of the product.",
            "example": "Sample Product"
          },
          "product_price": {
            "type": "number",
            "description": "The price of the product.",
            "example": 19.99
          }
        }
      },
      "UserLocation": {
        "type": "object",
        "properties": {
          "location_is_valid": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Whether the location is valid or not. Note: Location must be verified to be valid on the client before saving.",
            "example": "yes"
          },
          "never_prompt_again": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Set to yes if location will no longer be asked for automatically on the carts page when clicking on 'Get Bid'",
            "example": "no"
          },
          "user_id": {
            "type": "integer",
            "description": "The ID of the user whos location this is",
            "example": 123
          },
          "full_address": {
            "type": "string",
            "description": "The full address of the user",
            "example": "Collins Ave, Miami Beach, FL, USA"
          },
          "place_id": {
            "type": "string",
            "description": "The place ID of the location",
            "example": "EiRDb2xsaW5zIEF2ZW51ZSwgTWlhbWkgQmVhY2gsIEZMLCBVU0EiLiosChQKEglFsaTA7rLZiBGB9AOBMeq3bxIUChIJud3-Kxem2YgR62OUJUEXvjc"
          },
          "country_name": {
            "type": "string",
            "description": "The name of the country",
            "example": "United States"
          },
          "country_code": {
            "type": "string",
            "description": "The code of the country",
            "example": "US"
          },
          "country_active": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Whether the country is active or not",
            "example": "yes"
          },
          "state_name": {
            "type": "string",
            "description": "The name of the state",
            "example": "Florida"
          },
          "state_code": {
            "type": "string",
            "description": "The code of the state",
            "example": "FL"
          },
          "state_active": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Whether the state is active or not",
            "example": "yes"
          },
          "city_name": {
            "type": "string",
            "description": "The name of the city",
            "example": "Miami Beach"
          },
          "city_code": {
            "type": "string",
            "description": "The code of the city",
            "example": "Miami Beach"
          },
          "city_active": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Whether the city is active or not",
            "example": "yes"
          },
          "area_name": {
            "type": "string",
            "description": "The name of the area",
            "example": "Collins Ave"
          },
          "area_code": {
            "type": "string",
            "description": "The code of the area",
            "example": "Collins Ave"
          },
          "area_active": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Whether the area is active or not",
            "example": "yes"
          },
          "street_name": {
            "type": "string",
            "description": "The name of the street",
            "example": "Collins Ave"
          },
          "street_code": {
            "type": "string",
            "description": "The code of the street",
            "example": "Collins Ave"
          },
          "street_active": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ],
            "description": "Whether the street is active or not",
            "example": "yes"
          }
        }
      },
      "TrendingDeals": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The ID of the product",
            "example": 123
          },
          "product_title": {
            "type": "string",
            "description": "The title of the product",
            "example": "Sample Product"
          },
          "product_url": {
            "type": "string",
            "description": "The URL of the product",
            "example": "https://example.com/product/sample-product"
          },
          "product_price": {
            "type": "number",
            "description": "The price of the product",
            "example": 19.99
          },
          "product_price_html": {
            "type": "string",
            "description": "The HTML representation of the product price",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi>19.99&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>"
          },
          "product_price_regular": {
            "type": "number",
            "description": "The regular price of the product",
            "example": 24.99
          },
          "product_price_regular_html": {
            "type": "string",
            "description": "The HTML representation of the regular product price",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi>24.99&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>"
          },
          "product_image_url": {
            "type": "string",
            "description": "The URL of the product image",
            "example": "https://example.com/wp-content/uploads/2023/01/sample-product.jpg"
          }
        }
      },
      "LandingPageProduct": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The ID of the product",
            "example": 123
          },
          "product_title": {
            "type": "string",
            "description": "The title of the product",
            "example": "Sample Product"
          },
          "product_url": {
            "type": "string",
            "description": "The URL of the product",
            "example": "https://example.com/product/sample-product"
          },
          "product_price": {
            "type": "number",
            "description": "The price of the product",
            "example": 19.99
          },
          "product_price_html": {
            "type": "string",
            "description": "The HTML representation of the product price",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi>19.99&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>"
          },
          "product_image_url": {
            "type": "string",
            "description": "The URL of the product image",
            "example": "https://example.com/wp-content/uploads/2023/01/sample-product.jpg"
          }
        }
      },
      "SellerBidStats": {
        "type": "object",
        "properties": {
          "bids_received_and_opened": {
            "type": "integer",
            "description": "Number of bids received and opened",
            "example": 0
          },
          "bids_received_and_not_opened": {
            "type": "integer",
            "description": "Number of bids received and not opened",
            "example": 0
          },
          "bids_accepted_and_delivered": {
            "type": "integer",
            "description": "Number of bids accepted and delivered",
            "example": 0
          },
          "bids_accepted_and_not_delivered": {
            "type": "integer",
            "description": "Number of bids accepted and not delivered",
            "example": 0
          },
          "this_month": {
            "$ref": "#/components/schemas/SellerSingleBidsStats"
          },
          "lifetime": {
            "$ref": "#/components/schemas/SellerSingleBidsStats"
          }
        }
      },
      "SellerSingleBidsStats": {
        "type": "object",
        "properties": {
          "bids_received": {
            "type": "integer",
            "description": "Number of bids received",
            "example": 0
          },
          "bids_received_total_amount": {
            "type": "number",
            "description": "Total amount of bids received",
            "example": 0
          },
          "bids_accepted": {
            "type": "integer",
            "description": "Number of bids accepted",
            "example": 0
          },
          "bids_accepted_total_amount": {
            "type": "number",
            "description": "Total amount of bids accepted",
            "example": 0
          },
          "bids_lost": {
            "type": "integer",
            "description": "Number of bids lost",
            "example": 0
          },
          "bids_won": {
            "type": "integer",
            "description": "Number of bids won",
            "example": 0
          }
        }
      },
      "SellerSavings": {
        "type": "object",
        "properties": {
          "points_saved_this_month": {
            "type": "number",
            "description": "Points saved this month",
            "example": 0
          },
          "points_saved_this_month_html": {
            "type": "string",
            "description": "HTML representation of points saved this month",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi>0.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>"
          },
          "point_saved_this_month_percent": {
            "type": "number",
            "description": "Percentage of points saved this month",
            "example": 0
          },
          "point_saved_lifetime": {
            "type": "number",
            "description": "Points saved lifetime",
            "example": 0
          },
          "point_saved_lifetime_html": {
            "type": "string",
            "description": "HTML representation of points saved lifetime",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi>0.00&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>"
          },
          "point_saved_lifetime_percent": {
            "type": "number",
            "description": "Percentage of points saved lifetime",
            "example": 0
          }
        }
      },
      "YesOrNo": {
        "type": "string",
        "description": "Indicates whether the seller offers credit",
        "oneOf": [
          {
            "enum": [
              "yes"
            ],
            "description": "The seller offers credit."
          },
          {
            "enum": [
              "no"
            ],
            "description": "The seller does not offer credit."
          }
        ],
        "example": "no"
      },
      "PlanType": {
        "type": "string",
        "description": "Membership Plan types",
        "oneOf": [
          {
            "enum": [
              "basic_1_month"
            ],
            "description": "1 month basic plan"
          },
          {
            "enum": [
              "premium_1_month"
            ],
            "description": "1 month basic plan"
          },
          {
            "enum": [
              "premium_3_month"
            ],
            "description": "3 month premium plan"
          },
          {
            "enum": [
              "premium_12_month"
            ],
            "description": "12 month premium plan"
          },
          {
            "enum": [
              "premium_free_by_credit"
            ],
            "description": "Free premium plan by credit. Get credit to use for premium access for a while."
          },
          {
            "enum": [
              "premium_free_by_time"
            ],
            "description": "Free premium plan by time. E.g. 7-day free premium plan."
          }
        ],
        "examples": [
          "basic_1_month",
          "premium_1_month",
          "premium_3_month",
          "premium_12_month",
          "premium_free_by_credit",
          "premium_free_by_time"
        ]
      },
      "BidOfferCostOfOfferSubmission": {
        "type": "object",
        "properties": {
          "has_enough_points_to_submit_an_offer": {
            "type": "boolean",
            "description": "Whether the seller has enough points to submit an offer",
            "example": true
          },
          "seller_points_left": {
            "type": "integer",
            "description": "The number of points left for the seller",
            "example": 100
          },
          "points_needed_to_submit_an_offer": {
            "type": "integer",
            "description": "Points needed to submit an offer",
            "example": 10.48929384
          },
          "round_points_needed_to_submit_an_offer": {
            "type": "integer",
            "description": "Rounded points needed to submit an offer. Rounded to a few decimal place",
            "example": 10.49
          },
          "amount_saved_for_offer_submission": {
            "type": "number",
            "description": "Amount this seller saved for this particular offer submission if they are premium seller",
            "example": 0.5
          },
          "amount_to_deduct_for_offer_submission": {
            "type": "number",
            "description": "Amount to deduct for offer submission",
            "example": 0.5
          },
          "percent_to_deduct_for_successful_acceptance": {
            "type": "number",
            "description": "Percentage to deduct for successful acceptance according to the plan type",
            "example": 0.5
          }
        }
      },
      "SellerMembershipDetails": {
        "type": "object",
        "description": "Details about the seller's membership plan and wallet balance",
        "properties": {
          "membership_plan": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time when the membership was created",
                "example": "2025-03-17T18:50:07Z"
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time when the membership expires",
                "example": "2026-07-07T20:01:19Z"
              },
              "id": {
                "type": "integer",
                "description": "The ID of the membership plan",
                "example": 46243
              },
              "is_expired": {
                "type": "boolean",
                "description": "Whether the membership is expired or not",
                "example": false
              },
              "plan_type": {
                "type": "string",
                "description": "The type of the membership plan",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PlanType"
                  }
                ],
                "example": "premium_3_month"
              },
              "membership_plan_type_name": {
                "type": "string",
                "description": "The name of the membership plan type",
                "example": "Premium 3 Month"
              },
              "seller_id": {
                "type": "integer",
                "description": "The ID of the seller",
                "example": 96
              }
            }
          },
          "mycred_points_left": {
            "type": "integer",
            "description": "DEPRECATED: Will be removed in the next major version. Use wallet_balance",
            "example": 100,
            "deprecated": true
          },
          "wallet_balance": {
            "type": "number",
            "description": "The wallet balance of the seller",
            "examples": [
              50.00
            ]
          },
          "is_free_premium": {
            "type": "boolean",
            "description": "Whether the seller is on a free premium plan",
            "example": false
          },
          "is_free_premium_by": {
            "type": "string",
            "description": "NOTE: Dont use ths to know if its a free plan or not. Use 'is_free_premium' There are 2 types of free plan. Plan by credit (get credit to use for premium access for a whle) and plan by tme (e.g. 7-day free premum plan).",
            "examples": [
              "premium_free_by_credit"
            ],
            "enum": [
              "premium_free_by_credit",
              "premium_free_by_time"
            ]
          },
          "premium_amount_saved_this_month": {
            "type": "number",
            "description": "The amount saved this month as a premium seller",
            "example": 10.5
          },
          "premium_amount_saved_lifetime": {
            "type": "number",
            "description": "The total amount saved all time as a premium seller",
            "example": 100.0
          },
          "free_trial_details": {
            "$ref": "#/components/schemas/SellerEligibleFreePremiumTrial"
          },
          "wallet_stats": {
            "$ref": "#/components/schemas/WalletStats"
          },
          "current_plan_capabilities": {
            "type": "object",
            "description": "Capabilities of the current plan",
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SellerMembershipCapabilities"
              }
            ]
          }
        }
      },
      "BuyerNotifications": {
        "type": "object",
        "properties": {
          "unseen_bid_offers_count": {
            "type": "integer",
            "description": "Number of unseen bid offers for the buyer",
            "example": 5
          },
          "bid_offers_to_rate_count": {
            "type": "integer",
            "description": "Number of bid offers ready to be rated",
            "example": 3
          }
        }
      },
      "SellerNotifications": {
        "type": "object",
        "properties": {
          "unseen_bid_request_count": {
            "type": "integer",
            "description": "Number of unseen bid requests",
            "example": 5
          },
          "bid_requests_to_rate_count": {
            "type": "integer",
            "description": "Number of bid requests ready to be rated",
            "example": 3
          }
        }
      },
      "WooProductSubstitute": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "ID of the woo product",
            "example": 12345
          },
          "product_title": {
            "type": "string",
            "description": "Title of the product substitute",
            "example": "Product Title"
          },
          "product_url": {
            "type": "string",
            "description": "URL of the product substitute",
            "example": "https://example.com/product/12345"
          },
          "product_price": {
            "type": "number",
            "description": "Price of the product substitute",
            "example": 19.99
          },
          "product_price_html": {
            "type": "string",
            "description": "HTML representation of the product price",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi>19.99&nbsp;<span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;</span></bdi></span>"
          },
          "product_image_url": {
            "type": "string",
            "description": "Image URL of the product substitute",
            "example": "https://example.com/wp-content/uploads/2023/01/product-image.jpg"
          }
        }
      },
      "BuyerContactInfo": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the buyer",
            "example": "email@email.com"
          },
          "country": {
            "type": "string",
            "description": "Country of the buyer",
            "example": "Nigeria"
          },
          "state": {
            "type": "string",
            "description": "State of the buyer",
            "example": "Lagos"
          },
          "city": {
            "type": "string",
            "description": "City of the buyer",
            "example": "Lagos"
          },
          "address": {
            "type": "string",
            "description": "Address of the buyer",
            "example": "123 Main St, Lagos"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the buyer",
            "example": "+234 123 456 7890"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code",
            "example": "not_logged_in"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "You are not logged in. Please login first."
          },
          "data": {
            "type": "object",
            "description": "Additional error data",
            "example": null
          }
        }
      },
      "BidRequest": {
        "type": "object",
        "description": "A bid request is a request made by a buyer to sellers to submit offers for products they want to purchase. The bid request contains information about the products, quantities, and other details related to the request.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the bid request",
            "example": 20596
          },
          "key": {
            "type": "string",
            "description": "A unique key representing the bid request",
            "example": "BIDREQNG24 090100001"
          },
          "buyer_id": {
            "type": "integer",
            "description": "The ID of the buyer who made the bid request",
            "example": 1
          },
          "bid_request_status": {
            "type": "string",
            "description": "Current status of the bid request",
            "oneOf": [
              {
                "enum": [
                  "br_requested"
                ],
                "description": "This bid was just submitted"
              },
              {
                "enum": [
                  "br_action_required"
                ],
                "description": "One or more offers have been sent for this bid request but none of them has been accepted or rejected yet."
              },
              {
                "enum": [
                  "br_seller_received"
                ],
                "description": "At least one seller has opened this bid request"
              },
              {
                "enum": [
                  "br_expired"
                ],
                "description": "Its been a while (usually 24hrs) since this bid was sent but no offer has been sent for it yet."
              },
              {
                "enum": [
                  "br_ordered"
                ],
                "description": "This bid has an offer that was accepted but not yet paid for or marked as delivered."
              },
              {
                "enum": [
                  "br_paid"
                ],
                "description": "This bid has and offer that has been accepted and paid for but has not been marked as delivered yet."
              },
              {
                "enum": [
                  "br_cancelled"
                ],
                "description": "This bid request was cancelled"
              },
              {
                "enum": [
                  "br_delivered"
                ],
                "description": "This bid has an offer that has been accepted and also marked as delivered"
              }
            ],
            "example": "br_requested"
          },
          "buyer_rating": {
            "type": "integer",
            "description": "Average Rating of this buyer",
            "example": 0
          },
          "bid_request_products": {
            "type": "array",
            "description": "List of woo products included in the bid request",
            "items": {
              "$ref": "#/components/schemas/BidRequestProduct"
            }
          },
          "bid_offers": {
            "type": "array",
            "description": "List of bid offers associated with this bid request. Available only when requesting for a buyer",
            "items": {
              "$ref": "#/components/schemas/BidOffer"
            }
          },
          "seller_bid_offer": {
            "$ref": "#/components/schemas/BidOffer"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the bid request was created",
            "example": "2025-03-03 18:22:48"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the bid request was last updated",
            "example": "2025-03-03 18:22:48"
          },
          "parent_bid_offer_id": {
            "type": "integer",
            "description": "If this buyer rebid from this bid offer, this will be the parent bid offer ID",
            "example": 20568
          },
          "parent_bid_request_id": {
            "type": "integer",
            "description": "If this buyer rebid from this bid request, this will be the parent bid request ID",
            "example": 20568
          },
          "current_seller_rejected_it": {
            "type": "string",
            "description": "Indicates whether the current seller rejected the bid request",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The current seller rejected the bid request."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The current seller did not reject the bid request."
              }
            ],
            "example": "no"
          },
          "current_seller_rejected_it_reason": {
            "type": "string",
            "description": "Reason provided by the current seller for rejecting the bid request. Set if this bid request is requested by a seller.",
            "example": ""
          },
          "current_seller_has_seen_it": {
            "type": "string",
            "description": "Indicates whether the current seller has seen the bid request. Set if this bid request is requested by a seller.",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The current seller has seen the bid request."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The current seller has not seen the bid request."
              }
            ],
            "example": "no"
          },
          "total_price": {
            "type": "number",
            "description": "Total price of the bid request when considering all products and their prices. This is the total price of the bid request.",
            "example": 170
          },
          "total_price_html": {
            "type": "string",
            "description": "HTML formatted total price of the bid request when considering all products and their prices. This is the total price of the bid request.",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi><span class=\"woocommerce-Price-currencySymbol\">&#8358;<\/span>170.00<\/bdi><\/span>"
          },
          "buyer_country": {
            "type": "string",
            "description": "Country of the buyer who made this bid request",
            "example": "Nigeria"
          },
          "buyer_country_abbr": {
            "type": "string",
            "description": "Abbreviation of the country of the buyer who made this bid request",
            "example": "NG"
          },
          "buyer_state": {
            "type": "string",
            "description": "State of the buyer who made this bid request",
            "example": "Lagos"
          },
          "buyer_address": {
            "type": "string",
            "description": "Address of the buyer who made this bid request",
            "example": "123 Main St, Lagos"
          },
          "current_seller_ratting": {
            "type": "integer",
            "description": "Average rating of the current seller who is requesting this bid request.",
            "example": 0
          },
          "location_country_code": {
            "type": "string",
            "description": "The country code of the buyer's location when the bid request was placed",
            "example": "US"
          },
          "location_country_active": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "location_state_code": {
            "type": "string",
            "description": "The state code of the buyer's location when the bid request was placed",
            "example": "CA"
          },
          "location_state_active": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "location_city_code": {
            "type": "string",
            "description": "The city code of the buyer's location when the bid request was placed",
            "example": "Los Angeles"
          },
          "location_city_active": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "location_area_code": {
            "type": "string",
            "description": "The area code of the buyer's location when the bid request was placed",
            "example": "Downtown"
          },
          "location_area_active": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "location_street_code": {
            "type": "string",
            "description": "The street code of the buyer's location when the bid request was placed",
            "example": "Main St"
          },
          "location_street_active": {
            "$ref": "#/components/schemas/YesOrNo"
          },
          "status_for_current_seller": {
            "type": "string",
            "description": "The status of the bid request for the current seller. This is set if this bid request is requested by a seller.",
            "oneOf": [
              {
                "enum": [
                  "brs_action_required"
                ],
                "description": "The bid request is awaiting action from the seller."
              },
              {
                "enum": [
                  "brs_ordered"
                ],
                "description": "The bid request has been ordered by the seller."
              },
              {
                "enum": [
                  "brs_delivered"
                ],
                "description": "The bid request has been delivered by the seller."
              },
              {
                "enum": [
                  "brs_deliver_now"
                ],
                "description": "The seller is required to deliver the bid request now."
              },
              {
                "enum": [
                  "brs_submitted"
                ],
                "description": "The bid request has been submitted by the seller."
              },
              {
                "enum": [
                  "brs_lost"
                ],
                "description": "The bid request has been lost by the seller."
              },
              {
                "enum": [
                  "brs_rejected"
                ],
                "description": "The bid request has been rejected by the seller."
              },
              {
                "enum": [
                  "brs_expired"
                ],
                "description": "The bid request has expired for the seller."
              }
            ]
          }
        }
      },
      "BidRequestProduct": {
        "type": "object",
        "description": "Each bid request has Bid request products attached to it. The bid request product is associated to the woo product to purchase. The bid request product is the product that the buyer is requesting from the seller.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the bid request product",
            "example": 20597
          },
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the associated bid request",
            "example": 20596
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the bid request product was created",
            "example": "2025-03-03 18:22:48"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the bid request product was last updated",
            "example": "2025-03-03 18:22:48"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of this product in the bid request",
            "example": 1
          },
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid request product",
            "example": 32506
          },
          "product_title": {
            "type": "string",
            "description": "Title of the product associated with this bid request product",
            "example": ""
          },
          "product_image_url": {
            "type": "string",
            "description": "URL of the product image associated with this bid request product",
            "example": "https://demo.bid2bill.com/wp-content/uploads/2024/04/qb2ivfv3_0-150x150.jpg"
          },
          "product_url": {
            "type": "string",
            "description": "URL of the product associated with this bid request product",
            "example": "https://demo.bid2bill.com/product/test-product-5/"
          },
          "product_price": {
            "type": "number",
            "description": "Price of the product associated with this bid request product",
            "example": 60
          },
          "product_price_html": {
            "type": "string",
            "description": "HTML formatted price of the product associated with this bid request product",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi><span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;<\/span>6.00<\/bdi><\/span>"
          },
          "total": {
            "type": "number",
            "description": "Total price for this product in the bid request considering the quantity",
            "example": 60
          },
          "total_html": {
            "type": "string",
            "description": "HTML formatted total price for this product in the bid request considering the quantity",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi><span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;<\/span>60.00<\/bdi><\/span>"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product associated with this bid request product",
            "example": "simple"
          },
          "product_attributes": {
            "type": "array",
            "description": "Attributes of the product associated with this bid request product",
            "items": {
              "$ref": "#/components/schemas/BidProductAttribute"
            }
          }
        }
      },
      "BidOffer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the bid offer",
            "example": 20596
          },
          "key": {
            "type": "string",
            "description": "A unique key representing the bid offer",
            "example": "BIDOFRNG25 031500001"
          },
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the associated bid request",
            "example": 19983
          },
          "bid_request_key": {
            "type": "string",
            "description": "Same as the key for clarity",
            "example": "BIDREQNG24 090100001"
          },
          "seller_id": {
            "type": "integer",
            "description": "The ID of the seller making the bid offer",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "Current status of the bid offer",
            "oneOf": [
              {
                "enum": [
                  "pending"
                ],
                "description": "The bid offer has been sent and is awaiting response"
              },
              {
                "enum": [
                  "accepted"
                ],
                "description": "The bid offer has been accepted by the buyer."
              },
              {
                "enum": [
                  "rejected"
                ],
                "description": "The bid offer has been rejected by the buyer."
              },
              {
                "enum": [
                  "expired"
                ],
                "description": "The buyer did not accept or reject the bid offer within the specified time frame."
              }
            ],
            "example": "pending"
          },
          "current_seller_ratting": {
            "type": "integer",
            "description": "Average rating of the seller who made this offer. This considers all the rating received both when acting as buyer and seller.",
            "example": 3
          },
          "seller_rating": {
            "type": "integer",
            "description": "Rating the buyer gave to the seller who made this offer.",
            "example": 0
          },
          "seller_rating_description": {
            "type": "string",
            "description": "Description of the rating given by the buyer to the seller who made this offer.",
            "example": "The seller is very good."
          },
          "seller_rating_datetime": {
            "type": "string",
            "description": "Date and time when the rating was given by the buyer to the seller who made this offer.",
            "example": "2025-03-21 12:00:00"
          },
          "its_time_for_seller_rating": {
            "type": "boolean",
            "description": "Indicates whether it's time for the buyer to rate the seller.",
            "example": true
          },
          "buyer_rating": {
            "type": "integer",
            "description": "Rating the seller gave to the buyer currently listing this offer.",
            "example": 0
          },
          "buyer_rating_description": {
            "type": "string",
            "description": "Description of the rating given by the seller to the buyer currently listing this offer.",
            "example": "The buyer is very good."
          },
          "buyer_rating_datetime": {
            "type": "string",
            "description": "Date and time when the rating was given by the seller to the buyer currently listing this offer.",
            "example": "2025-03-21 12:00:00"
          },
          "its_time_for_buyer_rating": {
            "type": "boolean",
            "description": "Indicates whether it's time for the seller to rate the buyer.",
            "example": true
          },
          "seller_country": {
            "type": "string",
            "description": "Country of the seller who made this offer.",
            "example": "Nigeria"
          },
          "seller_state": {
            "type": "string",
            "description": "State of the seller who made this offer.",
            "example": "Lagos"
          },
          "seller_address": {
            "type": "string",
            "description": "Address of the seller who made this offer.",
            "example": "123 Main St, Lagos"
          },
          "discount_for_available_and_substitute": {
            "type": "integer",
            "description": "Discount (in percent) offered for available and substitute products",
            "example": "10"
          },
          "discount_for_available_only": {
            "type": "integer",
            "description": "Discount (in percent) offered for available products only",
            "example": "5"
          },
          "delivery_date": {
            "type": "string",
            "description": "Expected delivery date for the bid offer",
            "example": "2025-03-21"
          },
          "delivery_time": {
            "type": "string",
            "description": "Expected delivery time",
            "example": "after_noon"
          },
          "winning_change": {
            "type": "string",
            "description": "Winning chance of the bid offer",
            "oneOf": [
              {
                "enum": [
                  "red"
                ],
                "description": "The winning chance is low."
              },
              {
                "enum": [
                  "amber"
                ],
                "description": "The winning chance is moderate."
              },
              {
                "enum": [
                  "green"
                ],
                "description": "The winning chance is high."
              }
            ],
            "example": "red"
          },
          "offers_credit": {
            "type": "string",
            "description": "Indicates whether the seller offers credit",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The seller offers credit."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The seller does not offer credit."
              }
            ],
            "example": "no"
          },
          "offers_credit_days": {
            "type": "integer",
            "description": "Number of days for which credit is offered",
            "example": 0
          },
          "bid_offer_products": {
            "type": "array",
            "description": "List of woo products included in the bid offer",
            "items": {
              "$ref": "#/components/schemas/BidOfferProduct"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the bid offer was created",
            "example": "2025-03-03 18:22:48"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the bid offer was last updated",
            "example": "2025-03-03 18:22:48"
          },
          "parent_bid_request_id": {
            "type": "integer",
            "description": "The ID of the parent bid request this offer is associated with",
            "example": 20568
          },
          "order_id": {
            "type": "integer",
            "description": "The woocommerce order_id made when the buyer accepted this offer and paid",
            "example": 0
          },
          "calculated_total_available_only_amount": {
            "type": "number",
            "description": "Total amount for available products only",
            "example": 125
          },
          "calculated_total_amount_lowest_substitute": {
            "type": "number",
            "description": "Total amount for the lowest substitute product",
            "example": 45
          },
          "calculated_total_amount_highest_substitutes": {
            "type": "number",
            "description": "Total amount for the highest substitute product",
            "example": 71
          },
          "calculated_percentage_discount_for_available_only": {
            "type": "number",
            "description": "Calculated amount to discount percentage-wise for available products only",
            "example": 5
          },
          "calculated_lowest_percentage_discount_for_available_and_substitutes": {
            "type": "number",
            "description": "Calculated lowest amount to discount percentage-wise for available and substitutes products. Considering substitutes with lowest price",
            "example": 0
          },
          "calculated_highest_percentage_discount_for_available_and_substitutes": {
            "type": "number",
            "description": "Calculated highest amount to discount percentage-wise for available and substitutes products. Considering substitutes with highest price",
            "example": 0
          },
          "calculated_possible_highest_discount": {
            "type": "number",
            "description": "Calculated highest amount to discount after considering discounts for available and substitutes products. ",
            "example": 0
          },
          "seen_by_buyer": {
            "type": "string",
            "description": "Indicates whether the bid offer has been seen by the buyer",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The bid offer has been seen by the buyer."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The bid offer has not been seen by the buyer."
              }
            ],
            "example": "no"
          },
          "buyer_selected_available_only_or_available_and_substitute": {
            "type": "string",
            "description": "Indicates whether the buyer selected available only or available and substitute products",
            "oneOf": [
              {
                "enum": [
                  "available_only"
                ],
                "description": "The buyer selected to go with available products only before accepting the offer."
              },
              {
                "enum": [
                  "available_and_substitute"
                ],
                "description": "The buyer selected to go with available and substitute products before accepting the offer."
              }
            ],
            "example": "available_only"
          },
          "buyer_rejected_reason": {
            "type": "string",
            "description": "Reason provided by the buyer for rejecting the offer",
            "example": ""
          },
          "plan_type": {
            "type": "string",
            "description": "The plan type associated to this seller when they made this offer",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanType"
              }
            ],
            "example": "premium_12_month"
          },
          "plan_amount_deductible_for_offer_submission": {
            "type": "number",
            "description": "Number of mycred Points deductible on offer submission",
            "example": 0
          },
          "plan_amount_deductible_for_offer_submission_deducted": {
            "type": "string",
            "description": "Indicates whether the deductible points amount for offer submission has been deducted or not",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The deductible amount for offer submission has been deducted."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The deductible amount for offer submission has not been deducted."
              }
            ],
            "example": "no"
          },
          "plan_amount_saved_for_premium_plan_for_successful_offer_submission": {
            "type": "number",
            "description": "Number of mycred Points saved for premium plan for successful offer submission if the seller is on premium plan",
            "example": 5
          },
          "plan_percent_deductible_for_successful_offer_acceptance": {
            "type": "number",
            "description": "Percentage of mycred Points deductible from the seller for successful offer acceptance",
            "example": 1.5
          },
          "plan_amount_deductible_for_successful_offer_acceptance": {
            "type": "number",
            "description": "Number of mycred Points deductible from the seller for successful offer acceptance",
            "example": 0
          },
          "plan_amount_deductible_for_offer_acceptance_deducted": {
            "type": "string",
            "description": "Indicates whether the deductible points amount for offer acceptance has been deducted or not",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The deductible amount for offer acceptance has been deducted."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The deductible amount for offer acceptance has not been deducted."
              }
            ],
            "example": "no"
          },
          "plan_amount_saved_for_premium_plan_for_successful_offer_acceptance": {
            "type": "number",
            "description": "Number of mycred Points saved for premium plan for successful offer acceptance if the seller is on premium plan",
            "example": 0
          },
          "plan_percent_saved_for_premium_plan_for_successful_offer_acceptance": {
            "type": "number",
            "description": "Percentage of mycred Points saved for premium plan for successful offer acceptance if the seller is on premium plan",
            "example": 0
          },
          "plan_basic_percent_deductible_for_successful_offer_acceptance_now": {
            "type": "number",
            "description": "Percentage of mycred Points deductible from the seller for successful offer acceptance now if the seller is on basic plan",
            "example": 4
          },
          "plan_premium_percent_deductible_for_successful_offer_acceptance_now": {
            "type": "number",
            "description": "Percentage of mycred Points deductible from the seller for successful offer acceptance now if the seller is on premium plan",
            "example": 1.5
          }
        }
      },
      "NewBidOffer": {
        "type": "object",
        "description": "A new bid offer is an offer made by a seller in response to a bid request from a buyer. The new bid offer contains information about the products, quantities, and other details related to the offer.",
        "properties": {
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the associated bid request",
            "example": 19983
          },
          "discount_for_available_and_substitute": {
            "type": "integer",
            "description": "Discount (in percent) offered for available and substitute products",
            "example": "10"
          },
          "discount_for_available_only": {
            "type": "integer",
            "description": "Discount (in percent) offered for available products only",
            "example": "5"
          },
          "delivery_date": {
            "type": "string",
            "description": "Expected delivery date for the bid offer",
            "example": "2025-03-21"
          },
          "delivery_time": {
            "type": "string",
            "description": "Expected delivery time",
            "example": "after_noon"
          },
          "offers_credit": {
            "type": "string",
            "description": "Indicates whether the seller offers credit",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The seller offers credit."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The seller does not offer credit."
              }
            ],
            "example": "no"
          },
          "offers_credit_days": {
            "type": "integer",
            "description": "Number of days for which credit is offered",
            "example": 0
          },
          "bid_offer_products": {
            "type": "array",
            "description": "List of woo products included in the bid offer",
            "items": {
              "$ref": "#/components/schemas/NewBidOfferProduct"
            }
          },
          "buyer_selected_available_only_or_available_and_substitute": {
            "type": "string",
            "description": "Indicates whether the buyer selected available only or available and substitute products",
            "oneOf": [
              {
                "enum": [
                  "available_only"
                ],
                "description": "The buyer selected to go with available products only before accepting the offer."
              },
              {
                "enum": [
                  "available_and_substitute"
                ],
                "description": "The buyer selected to go with available and substitute products before accepting the offer."
              }
            ],
            "example": "available_only"
          }
        }
      },
      "UpdateBidOffer": {
        "type": "object",
        "description": "An existing bid offer is an offer made by a seller in response to a bid request from a buyer. The existing bid offer contains information about the products, quantities, and other details related to the offer.",
        "properties": {
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the associated bid request",
            "example": 19983
          },
          "discount_for_available_only": {
            "type": "integer",
            "description": "Discount (in percent) offered for available products only",
            "example": 5
          },
          "discount_for_available_and_substitute": {
            "type": "integer",
            "description": "Discount (in percent) offered for available and substitute products",
            "example": 10
          },
          "delivery_date": {
            "type": "string",
            "description": "Expected delivery date for the bid offer",
            "example": "2025-03-21"
          },
          "delivery_time": {
            "$ref": "#/components/schemas/BidOfferDeliveryTime"
          },
          "offers_credit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/YesOrNo"
              }
            ],
            "description": "Indicates whether the seller offers credit"
          },
          "offers_credit_days": {
            "type": "integer",
            "description": "Number of days for which credit is offered",
            "example": 0
          },
          "bid_offer_products": {
            "type": "array",
            "description": "List of woo products included in the bid offer",
            "items": {
              "$ref": "#/components/schemas/UpdateBidOfferProduct"
            }
          },
          "buyer_selected_available_only_or_available_and_substitute": {
            "type": "string",
            "description": "Indicates whether the buyer selected available only or available and substitute products",
            "oneOf": [
              {
                "enum": [
                  "available_only"
                ],
                "description": "The buyer selected to go with available products only before accepting the offer."
              },
              {
                "enum": [
                  "available_and_substitute"
                ],
                "description": "The buyer selected to go with available and substitute products before accepting the offer."
              }
            ],
            "example": "available_only"
          }
        }
      },
      "BidOfferProduct": {
        "type": "object",
        "description": "Each offer has Bid offer products attached to it. The bid offer product is associated to the woocommerce product to purchase. The bid offer product is the product that the seller is offering to the buyer.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the bid offer product",
            "example": 20597
          },
          "bid_offer_id": {
            "type": "integer",
            "description": "The ID of the associated bid offer",
            "example": 20596
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the bid offer product was created",
            "example": "2025-03-03 18:22:48"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the bid offer product was last updated",
            "example": "2025-03-03 18:22:48"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of this product in the bid offer",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "Current status of the bid offer product",
            "oneOf": [
              {
                "enum": [
                  "available"
                ],
                "description": "The product is available."
              },
              {
                "enum": [
                  "not_available"
                ],
                "description": "The product is not available."
              },
              {
                "enum": [
                  "substitute"
                ],
                "description": "The product is a substitute."
              }
            ],
            "example": "available"
          },
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid offer product",
            "example": 32506
          },
          "product_title": {
            "type": "string",
            "description": "Title of the product associated with this bid offer product",
            "example": "Test Product 5"
          },
          "product_url": {
            "type": "string",
            "description": "URL of the product associated with this bid offer product",
            "example": "https://demo.bid2bill.com/product/test-product-5/"
          },
          "product_price": {
            "type": "number",
            "description": "Price of the product associated with this bid offer product",
            "example": 60
          },
          "product_price_html": {
            "type": "string",
            "description": "HTML formatted price of the product associated with this bid offer product",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi><span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;<\/span>6.00<\/bdi><\/span>"
          },
          "bid_offer_product_substitutes": {
            "type": "array",
            "description": "List of substitutes for this product in the bid offer",
            "items": {
              "$ref": "#/components/schemas/BidOfferProductSubstitute"
            }
          },
          "sub_total_available_only": {
            "type": "number",
            "description": "Sub total for available products only. Because this bid offer product is available.",
            "example": 60
          },
          "sub_total_lowest_substitutes": {
            "type": "number",
            "description": "Sub total for the lowest substitute product. Considers the substitute with the lowest price.",
            "example": 0
          },
          "sub_total_highest_substitutes": {
            "type": "number",
            "description": "Sub total for the highest substitute product. Considers the substitute with the highest price.",
            "example": 0
          },
          "bought_by_buyer": {
            "type": "string",
            "description": "Indicates whether the product has been bought by the buyer. Will be yes once the bid offer is marked as paid",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The product has been bought by the buyer."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The product has not been bought by the buyer."
              }
            ],
            "example": "no"
          },
          "product_image_url": {
            "type": "string",
            "description": "URL of the product image associated with this bid offer product",
            "example": "https://demo.bid2bill.com/wp-content/uploads/2024/04/qb2ivfv3_0-150x150.jpg"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product associated with this bid request product",
            "example": "simple"
          },
          "product_attributes": {
            "type": "array",
            "description": "Attributes of the product associated with this bid request product",
            "items": {
              "$ref": "#/components/schemas/BidProductAttribute"
            }
          }
        }
      },
      "NewBidOfferProduct": {
        "type": "object",
        "description": "A new bid offer product used when creating a new bid offer. Each offer has Bid offer products attached to it. The bid offer product is associated to the woocommerce product to purchase. The bid offer product is the product that the seller is offering to the buyer.",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Quantity of this product in the bid offer",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "Current status of the bid offer product",
            "oneOf": [
              {
                "enum": [
                  "available"
                ],
                "description": "The product is available."
              },
              {
                "enum": [
                  "not_available"
                ],
                "description": "The product is not available."
              },
              {
                "enum": [
                  "substitute"
                ],
                "description": "The product is a substitute."
              }
            ],
            "example": "available"
          },
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid offer product",
            "example": 32506
          },
          "bid_offer_product_substitutes": {
            "type": "array",
            "description": "List of substitutes for this product in the bid offer",
            "items": {
              "$ref": "#/components/schemas/NewBidOfferProductSubstitute"
            }
          }
        }
      },
      "UpdateBidOfferProduct": {
        "type": "object",
        "description": "Bid offer product format used when updating a bid offer. Each offer has Bid offer products attached to it. The bid offer product is associated to the woocommerce product to purchase. The bid offer product is the product that the seller is offering to the buyer.",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Quantity of this product in the bid offer",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "Current status of the bid offer product",
            "oneOf": [
              {
                "enum": [
                  "available"
                ],
                "description": "The product is available."
              },
              {
                "enum": [
                  "not_available"
                ],
                "description": "The product is not available."
              },
              {
                "enum": [
                  "substitute"
                ],
                "description": "The product is a substitute."
              }
            ],
            "example": "available"
          },
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid offer product",
            "example": 32506
          },
          "bid_offer_product_substitutes": {
            "type": "array",
            "description": "List of substitutes for this product in the bid offer",
            "items": {
              "$ref": "#/components/schemas/UpdateBidOfferProductSubstitute"
            }
          }
        }
      },
      "BidOfferProductSubstitute": {
        "type": "object",
        "description": "Each bid request has Bid request products attached to it. The bid request product is associated to the woo product to purchase. The bid request product is the product that the buyer is requesting from the seller.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the bid request product",
            "example": 20597
          },
          "bid_offer_product_id": {
            "type": "integer",
            "description": "The ID of the associated bid offer product",
            "example": 20596
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the bid offer product substitute was created",
            "example": "2025-03-03 18:22:48"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the bid product substitute was last updated",
            "example": "2025-03-03 18:22:48"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of this product in the bid offer product substitute",
            "example": 1
          },
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid offer product substitute",
            "example": 32506
          },
          "product_title": {
            "type": "string",
            "description": "Title of the woocommerce product associated with this bid offer product substitute",
            "example": "Test Product 5"
          },
          "product_url": {
            "type": "string",
            "description": "URL of the woocommerce product associated with this bid offer product substitute",
            "example": "https://demo.bid2bill.com/product/test-product-5/"
          },
          "product_price": {
            "type": "number",
            "description": "Price of the woocommerce product associated with this bid offer product substitute",
            "example": 2.5
          },
          "product_price_html": {
            "type": "string",
            "description": "HTML formatted price of the woocommerce product associated with this bid offer product substitute",
            "example": "<span class=\"woocommerce-Price-amount amount\"><bdi><span class=\"woocommerce-Price-currencySymbol\">&#x62f;.&#x625;<\/span>2.50<\/bdi><\/span>"
          },
          "calculated_sub_total": {
            "type": "number",
            "description": "Calculated sub total for the product substitute considering the quantity",
            "example": 2.5
          },
          "selected_by_buyer": {
            "type": "string",
            "description": "Indicates whether the product substitute has been selected by the buyer",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The product substitute has been selected by the buyer before accepting the offer."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The product substitute has not been selected by the buyer."
              }
            ],
            "example": "no"
          },
          "bought_by_buyer": {
            "type": "string",
            "description": "Indicates whether the product substitute has been bought by the buyer. Will be yes once the bid offer is marked as paid",
            "oneOf": [
              {
                "enum": [
                  "yes"
                ],
                "description": "The product substitute has been bought by the buyer."
              },
              {
                "enum": [
                  "no"
                ],
                "description": "The product substitute has not been bought by the buyer."
              }
            ],
            "example": "no"
          },
          "product_image_url": {
            "type": "string",
            "description": "URL of the product image associated with this bid offer product substitute",
            "example": "https://demo.bid2bill.com/wp-content/uploads/2024/04/qb2ivfv3_0-150x150.jpg"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product associated with this bid request product",
            "example": "simple"
          },
          "product_attributes": {
            "type": "array",
            "description": "Attributes of the product associated with this bid request product",
            "items": {
              "$ref": "#/components/schemas/BidProductAttribute"
            }
          }
        }
      },
      "NewBidOfferProductSubstitute": {
        "type": "object",
        "description": "A new bid offer product substitute used when creating a new bid offer. Bid offer product substitutes are associated with the bid offer product. The bid offer product substitute is the product that the seller is offering as a substitute to the buyer.",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid offer product substitute",
            "example": 32506
          }
        }
      },
      "UpdateBidOfferProductSubstitute": {
        "type": "object",
        "description": "Bid offer product substitute format used when updating a bid offer product substitute. Bid offer product substitutes are associated with the bid offer product. The bid offer product substitute is the product that the seller is offering as a substitute to the buyer.",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The woocomerce product id associated with this bid offer product substitute",
            "example": 32506
          }
        }
      },
      "BidProductAttribute": {
        "type": "object",
        "description": "Attributes belonging to a variation of a variable product.",
        "properties": {
          "attribute_name": {
            "type": "string",
            "description": "The name of the attribute",
            "example": "Color"
          },
          "attribute_value": {
            "type": "string",
            "description": "The value of the attribute",
            "example": "Red"
          }
        }
      },
      "BidOfferStatus": {
        "type": "object",
        "properties": {
          "pending": {
            "type": "string",
            "description": "The bid offer has been sent and is awaiting response",
            "example": "pending"
          },
          "accepted": {
            "type": "string",
            "description": "The bid offer has been accepted by the buyer.",
            "example": "accepted"
          },
          "rejected": {
            "type": "string",
            "description": "The bid offer has been rejected by the buyer.",
            "example": "rejected"
          },
          "expired": {
            "type": "string",
            "description": "The buyer did not accept or reject the bid offer within the specified time frame.",
            "example": "expired"
          }
        }
      },
      "ProductIdsAndQuantities": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The woocommerce product id",
            "example": 32506
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product",
            "example": 1
          }
        }
      },
      "WinningChance": {
        "type": "object",
        "properties": {
          "red": {
            "type": "string",
            "description": "The winning chance is low.",
            "example": "red"
          },
          "amber": {
            "type": "string",
            "description": "The winning chance is moderate.",
            "example": "amber"
          },
          "green": {
            "type": "string",
            "description": "The winning chance is high.",
            "example": "green"
          }
        }
      },
      "BidOfferDeliveryTime": {
        "type": "string",
        "description": "Expected delivery time",
        "oneOf": [
          {
            "enum": [
              "before_noon"
            ],
            "description": "Delivery expected before noon."
          },
          {
            "enum": [
              "after_noon"
            ],
            "description": "Delivery expected after noon."
          },
          {
            "enum": [
              "6pm_to_9pm"
            ],
            "description": "Delivery expected between 6 PM and 9 PM."
          }
        ],
        "example": "after_noon"
      },
      "GetWinningChancePayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the bid offer if it already exist. If not, set to 0",
            "example": 19983
          },
          "bid_request_id": {
            "type": "integer",
            "description": "The ID of the associated bid request",
            "example": 19983
          },
          "calculated_highest_percentage_discount_for_available_and_substitutes": {
            "type": "number",
            "description": "Calculated highest amount to discount percentage-wise for available and substitutes products. Considering substitutes with highest price",
            "example": 0
          },
          "calculated_lowest_percentage_discount_for_available_and_substitutes": {
            "type": "number",
            "description": "Calculated lowest amount to discount percentage-wise for available and substitutes products. Considering substitutes with lowest price",
            "example": 0
          },
          "calculated_percentage_discount_for_available_only": {
            "type": "number",
            "description": "Calculated amount to discount percentage-wise for available products only",
            "example": 5
          }
        },
        "required": [
          "id",
          "bid_request_id",
          "calculated_highest_percentage_discount_for_available_and_substitutes",
          "calculated_lowest_percentage_discount_for_available_and_substitutes",
          "calculated_percentage_discount_for_available_only"
        ],
        "example": {
          "id": 0,
          "bid_request_id": 19983,
          "calculated_highest_percentage_discount_for_available_and_substitutes": 0,
          "calculated_lowest_percentage_discount_for_available_and_substitutes": 0,
          "calculated_percentage_discount_for_available_only": 5
        }
      },
      "BuyerMenuEnum": {
        "type": "string",
        "enum": [
          "bid_requests",
          "bid_offers",
          "bid_requests_for_rating",
          "bid_offers_for_rating"
        ]
      },
      "BuyerMenuBidsSubmitted": {
        "type": "string",
        "description": "All Bids Submitted by this buyer",
        "example": "bids_submitted",
        "enum": [
          "bids_submitted"
        ]
      },
      "BuyerMenuBidsAccepted": {
        "type": "string",
        "description": "Bids Accepted",
        "example": "bids_accepted",
        "enum": [
          "bids_accepted"
        ]
      },
      "BuyerMenuBidsRejected": {
        "type": "string",
        "description": "Bids Rejected",
        "example": "bids_rejected",
        "enum": [
          "bids_rejected"
        ]
      },
      "BuyerMenuBidsExpired": {
        "type": "string",
        "description": "Bids Expired",
        "example": "bids_expired",
        "enum": [
          "bids_expired"
        ]
      },
      "BuyerMenu": {
        "type": "string",
        "description": "The menu to display for the buyer",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BuyerMenuEnum"
          }
        ]
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Operations related to authentication."
    },
    {
      "name": "Client Device",
      "description": "Operations related maintaining multiple devices for a user."
    },
    {
      "name": "Membership",
      "description": "Operations related to membership."
    },
    {
      "name": "Bid Offer",
      "description": "Operations related to bid offers."
    },
    {
      "name": "Bid Request",
      "description": "Operations related to bid requests."
    },
    {
      "name": "Seller",
      "description": "Operations related to sellers."
    },
    {
      "name": "Wallet",
      "description": "Operations related to wallet."
    },
    {
      "name": "Buyer",
      "description": "Operations related to buyer."
    },
    {
      "name": "Stats",
      "description": "Operations related to statistics."
    },
    {
      "name": "Notification",
      "description": "Operations related to notifications."
    },
    {
      "name": "Landing Page",
      "description": "Operations related to landing page."
    },
    {
      "name": "Location",
      "description": "Operations related to location."
    },
    {
      "name": "Woocommerce",
      "description": "Some helper API for woocommerce"
    },
    {
      "name": "Testing",
      "description": "Operations related to internal testing. For Tests Only. Do not use"
    }
  ]
}
